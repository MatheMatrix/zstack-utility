import array
import os

from zstacklib.test.utils import env
from zstacklib.utils import uuidhelper, linux, xmlobject

if not os.path.isdir(env.VOLUME_DIR):
    os.makedirs(env.VOLUME_DIR)

attach_volume_body = {
    "volume": {
        "installPath": None,  # must fill
        "deviceId": 1,
        "deviceType": "file",
        "volumeUuid": None,  # must fill
        "useVirtio": True,
        "useVirtioSCSI": False,
        "shareable": False,
        "cacheMode": "none",
        "wwn": "0x000f6c46e4c236bf",
        "bootOrder": 0,
        "physicalBlockSize": 0,
        "type": "Data",
        "format": "qcow2",
        "primaryStorageType": "LocalStorage",
        "controllerIndex": 0,
        "ioThreadId": 0
    },
    "vmInstanceUuid": None,  # must fill
    "addons": {
        "attachedDataVolumes": []
    },
    "kvmHostAddons": {
        "qcow2Options": " -o cluster_size=2097152 "
    }
}


attach_shareblock_volume_body = {
    "volume": {
        "installPath": None,  # must fill
        "deviceId": 1,
        "deviceType": "file",
        "volumeUuid": None,  # must fill
        "useVirtio": True,
        "useVirtioSCSI": False,
        "shareable": False,
        "cacheMode": "none",
        "wwn": "0x000f6c46e4c236bf",
        "bootOrder": 0,
        "physicalBlockSize": 0,
        "type": "Data",
        "format": "qcow2",
        "primaryStorageType": "SharedBlock",
        "controllerIndex": 0,
        "ioThreadId": 0
    },
    "vmInstanceUuid": None,  # must fill
    "addons": {
        "attachedDataVolumes": []
    }
}

start_vm_sharedblock_data_vol = {
        "installPath": None,  # must fill
        "deviceId": 1,
        "deviceType": "file",
        "volumeUuid": None,  # must fill
        "useVirtio": True,
        "useVirtioSCSI": False,
        "shareable": False,
        "cacheMode": "none",
        "wwn": "0x000f6c46e4c236bf",
        "bootOrder": 0,
        "physicalBlockSize": 0,
        "type": "Data",
        "format": "qcow2",
        "primaryStorageType": "SharedBlock",
        "controllerIndex": 0,
        "ioThreadId": 0
    }


def create_empty_volume(size=134217728):  # 128M
    # type: (long) -> (str, str)

    """
    :param size: volume size in bytes
    :return: (volume_uuid, install_path)
    """

    vol_uuid = uuidhelper.uuid()
    vol_path = os.path.join(env.VOLUME_DIR, '%s.qcow2' % vol_uuid)
    linux.qcow2_create(vol_path, size)
    return vol_uuid, vol_path


def find_volume_in_vm_xml_by_path(vm_xmlobject, vol_path):
    # type: (xmlobject.XmlObject, str) -> xmlobject.XmlObject

    for vol in vm_xmlobject.devices.get_child_node_as_list('disk'):
        if vol.source.file_ == vol_path:
            return vol

    return None

def find_volume_controller_by_vol(vm_xml, controller_index):
    for controller in vm_xml.devices.get_child_node_as_list("controller"):
        if controller_index == controller.index_:
            return controller
    return None

# hexdump -C empty.iso (md5sum is ab0d084f7c8e01556327a9743a82725b)
# 00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# *
# 00008000  01 43 44 30 30 31 01 00  4c 49 4e 55 58 20 20 20  |.CD001..LINUX   |
# 00008010  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
# 00008020  20 20 20 20 20 20 20 20  43 44 52 4f 4d 20 20 20  |        CDROM   |
# 00008030  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
# 00008040  20 20 20 20 20 20 20 20  00 00 00 00 00 00 00 00  |        ........|
# 00008050  ae 00 00 00 00 00 00 ae  00 00 00 00 00 00 00 00  |................|
# 00008060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# 00008070  00 00 00 00 00 00 00 00  01 00 00 01 01 00 00 01  |................|
# 00008080  00 08 08 00 0a 00 00 00  00 00 00 0a 13 00 00 00  |................|
# 00008090  00 00 00 00 00 00 00 15  00 00 00 00 22 00 17 00  |............"...|
# 000080a0  00 00 00 00 00 17 00 08  00 00 00 00 08 00 7c 09  |..............|.|
# 000080b0  18 11 1c 3b 20 02 00 00  01 00 00 01 01 00 20 20  |...; .........  |
# 000080c0  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
# *
# 00008230  20 20 20 20 20 20 20 20  20 20 20 20 20 20 47 45  |              GE|
# 00008240  4e 49 53 4f 49 4d 41 47  45 20 49 53 4f 20 39 36  |NISOIMAGE ISO 96|
# 00008250  36 30 2f 48 46 53 20 46  49 4c 45 53 59 53 54 45  |60/HFS FILESYSTE|
# 00008260  4d 20 43 52 45 41 54 4f  52 20 28 43 29 20 31 39  |M CREATOR (C) 19|
# 00008270  39 33 20 45 2e 59 4f 55  4e 47 44 41 4c 45 20 28  |93 E.YOUNGDALE (|
# 00008280  43 29 20 31 39 39 37 2d  32 30 30 36 20 4a 2e 50  |C) 1997-2006 J.P|
# 00008290  45 41 52 53 4f 4e 2f 4a  2e 53 43 48 49 4c 4c 49  |EARSON/J.SCHILLI|
# 000082a0  4e 47 20 28 43 29 20 32  30 30 36 2d 32 30 30 37  |NG (C) 2006-2007|
# 000082b0  20 43 44 52 4b 49 54 20  54 45 41 4d 20 20 20 20  | CDRKIT TEAM    |
# 000082c0  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
# *
# 00008320  20 20 20 20 20 20 20 20  20 20 20 20 20 32 30 32  |             202|
# 00008330  34 30 39 32 35 31 33 32  32 35 35 30 30 20 32 30  |4092513225500 20|
# 00008340  32 34 30 39 32 35 31 33  32 32 35 35 30 30 20 30  |24092513225500 0|
# 00008350  30 30 30 30 30 30 30 30  30 30 30 30 30 30 30 00  |000000000000000.|
# 00008360  32 30 32 34 30 39 32 35  31 33 32 32 35 35 30 30  |2024092513225500|
# 00008370  20 01 00 20 20 20 20 20  20 20 20 20 20 20 20 20  | ..             |
# 00008380  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
# *
# 00008570  20 20 20 00 00 00 00 00  00 00 00 00 00 00 00 00  |   .............|
# 00008580  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# *
# 00008800  ff 43 44 30 30 31 01 00  00 00 00 00 00 00 00 00  |.CD001..........|
# 00008810  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# *
# 00009800  01 00 17 00 00 00 01 00  00 00 00 00 00 00 00 00  |................|
# 00009810  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# *
# 0000a800  01 00 00 00 00 17 00 01  00 00 00 00 00 00 00 00  |................|
# 0000a810  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# *
# 0000b800  22 00 17 00 00 00 00 00  00 17 00 08 00 00 00 00  |"...............|
# 0000b810  08 00 7c 09 18 11 1c 3b  20 02 00 00 01 00 00 01  |..|....; .......|
# 0000b820  01 00 22 00 17 00 00 00  00 00 00 17 00 08 00 00  |..".............|
# 0000b830  00 00 08 00 7c 09 18 11  1c 3b 20 02 00 00 01 00  |....|....; .....|
# 0000b840  00 01 01 01 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# 0000b850  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# *
# 00057000
def generate_empty_iso_array():
    a = array.array('B')

    for i in xrange(0x8000):
        a.append(0)

    a.extend([0x01, 0x43, 0x44, 0x30, 0x30, 0x31, 0x01, 0x00, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x20, 0x20, 0x20])
    a.extend([0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20])
    a.extend([0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x44, 0x52, 0x4f, 0x4d, 0x20, 0x20, 0x20])
    a.extend([0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20])
    a.extend([0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    a.extend([0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    a.extend([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    a.extend([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01])
    a.extend([0x00, 0x08, 0x08, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x13, 0x00, 0x00, 0x00])
    a.extend([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x17, 0x00])
    a.extend([0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x7c, 0x09])
    a.extend([0x18, 0x11, 0x1c, 0x3b, 0x20, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x20, 0x20])
    
    for i in xrange(368):
        a.append(0x20)

    a.extend([0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x47, 0x45])
    a.extend([0x4e, 0x49, 0x53, 0x4f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x39, 0x36])
    a.extend([0x36, 0x30, 0x2f, 0x48, 0x46, 0x53, 0x20, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45])
    a.extend([0x4d, 0x20, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x20, 0x28, 0x43, 0x29, 0x20, 0x31, 0x39])
    a.extend([0x39, 0x33, 0x20, 0x45, 0x2e, 0x59, 0x4f, 0x55, 0x4e, 0x47, 0x44, 0x41, 0x4c, 0x45, 0x20, 0x28])
    a.extend([0x43, 0x29, 0x20, 0x31, 0x39, 0x39, 0x37, 0x2d, 0x32, 0x30, 0x30, 0x36, 0x20, 0x4a, 0x2e, 0x50])
    a.extend([0x45, 0x41, 0x52, 0x53, 0x4f, 0x4e, 0x2f, 0x4a, 0x2e, 0x53, 0x43, 0x48, 0x49, 0x4c, 0x4c, 0x49])
    a.extend([0x4e, 0x47, 0x20, 0x28, 0x43, 0x29, 0x20, 0x32, 0x30, 0x30, 0x36, 0x2d, 0x32, 0x30, 0x30, 0x37])
    a.extend([0x20, 0x43, 0x44, 0x52, 0x4b, 0x49, 0x54, 0x20, 0x54, 0x45, 0x41, 0x4d, 0x20, 0x20, 0x20, 0x20])
    
    for i in xrange(96):
        a.append(0x20)

    a.extend([0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x30, 0x32])
    a.extend([0x34, 0x30, 0x39, 0x32, 0x35, 0x31, 0x33, 0x32, 0x32, 0x35, 0x35, 0x30, 0x30, 0x20, 0x32, 0x30])
    a.extend([0x32, 0x34, 0x30, 0x39, 0x32, 0x35, 0x31, 0x33, 0x32, 0x32, 0x35, 0x35, 0x30, 0x30, 0x20, 0x30])
    a.extend([0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00])
    a.extend([0x32, 0x30, 0x32, 0x34, 0x30, 0x39, 0x32, 0x35, 0x31, 0x33, 0x32, 0x32, 0x35, 0x35, 0x30, 0x30])
    a.extend([0x20, 0x01, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20])

    for i in xrange(496):
        a.append(0x20)

    a.extend([0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

    for i in xrange(640):
        a.append(0x00)

    a.extend([0xff, 0x43, 0x44, 0x30, 0x30, 0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

    for i in xrange(4080):
        a.append(0x00)

    a.extend([0x01, 0x00, 0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

    for i in xrange(4080):
        a.append(0x00)

    a.extend([0x01, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

    for i in xrange(4080):
        a.append(0x00)

    a.extend([0x22, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00])
    a.extend([0x08, 0x00, 0x7c, 0x09, 0x18, 0x11, 0x1c, 0x3b, 0x20, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01])
    a.extend([0x01, 0x00, 0x22, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x08, 0x00, 0x00])
    a.extend([0x00, 0x00, 0x08, 0x00, 0x7c, 0x09, 0x18, 0x11, 0x1c, 0x3b, 0x20, 0x02, 0x00, 0x00, 0x01, 0x00])
    a.extend([0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

    for i in xrange(309168):
        a.append(0x00)

    return a

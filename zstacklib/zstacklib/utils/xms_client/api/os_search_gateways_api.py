# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from zstacklib.utils.xms_client.api_client import ApiClient


class OsSearchGatewaysApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_os_search_gateway_samples(self, gateway_id, **kwargs):  # noqa: E501
        """get_os_search_gateway_samples  # noqa: E501

        get a os search gateway's samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_os_search_gateway_samples(gateway_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int gateway_id: os search gateway id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: OSSearchGatewaySamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_os_search_gateway_samples_with_http_info(gateway_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_os_search_gateway_samples_with_http_info(gateway_id, **kwargs)  # noqa: E501
            return data

    def get_os_search_gateway_samples_with_http_info(self, gateway_id, **kwargs):  # noqa: E501
        """get_os_search_gateway_samples  # noqa: E501

        get a os search gateway's samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_os_search_gateway_samples_with_http_info(gateway_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int gateway_id: os search gateway id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: OSSearchGatewaySamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gateway_id', 'duration_begin', 'duration_end', 'period']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_os_search_gateway_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gateway_id' is set
        if ('gateway_id' not in params or
                params['gateway_id'] is None):
            raise ValueError("Missing the required parameter `gateway_id` when calling `get_os_search_gateway_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gateway_id' in params:
            path_params['gateway_id'] = params['gateway_id']  # noqa: E501

        query_params = []
        if 'duration_begin' in params:
            query_params.append(('duration_begin', params['duration_begin']))  # noqa: E501
        if 'duration_end' in params:
            query_params.append(('duration_end', params['duration_end']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-gateways/{gateway_id}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchGatewaySamplesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_os_search_gateways(self, gateway_id, **kwargs):  # noqa: E501
        """get_os_search_gateways  # noqa: E501

        Get OS Search Gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_os_search_gateways(gateway_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int gateway_id: os search gateway id (required)
        :return: OSSearchGatewayResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_os_search_gateways_with_http_info(gateway_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_os_search_gateways_with_http_info(gateway_id, **kwargs)  # noqa: E501
            return data

    def get_os_search_gateways_with_http_info(self, gateway_id, **kwargs):  # noqa: E501
        """get_os_search_gateways  # noqa: E501

        Get OS Search Gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_os_search_gateways_with_http_info(gateway_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int gateway_id: os search gateway id (required)
        :return: OSSearchGatewayResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gateway_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_os_search_gateways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gateway_id' is set
        if ('gateway_id' not in params or
                params['gateway_id'] is None):
            raise ValueError("Missing the required parameter `gateway_id` when calling `get_os_search_gateways`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gateway_id' in params:
            path_params['gateway_id'] = params['gateway_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-gateways/{gateway_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchGatewayResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_os_search_gateways(self, **kwargs):  # noqa: E501
        """list_os_search_gateways  # noqa: E501

        List OS Search Gateways  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_os_search_gateways(async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: os search engine id
        :param str q: query param of search
        :param str sort: sort param of search
        :return: OSSearchGatewaysResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_os_search_gateways_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_os_search_gateways_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_os_search_gateways_with_http_info(self, **kwargs):  # noqa: E501
        """list_os_search_gateways  # noqa: E501

        List OS Search Gateways  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_os_search_gateways_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: os search engine id
        :param str q: query param of search
        :param str sort: sort param of search
        :return: OSSearchGatewaysResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id', 'q', 'sort']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_os_search_gateways" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'os_search_engine_id' in params:
            query_params.append(('os_search_engine_id', params['os_search_engine_id']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-gateways/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchGatewaysResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

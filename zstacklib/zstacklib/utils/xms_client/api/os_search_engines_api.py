# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from zstacklib.utils.xms_client.api_client import ApiClient


class OsSearchEnginesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_os_search_gateways(self, os_search_engine_id, body, **kwargs):  # noqa: E501
        """add_os_search_gateways  # noqa: E501

        Create new OS Search gateways on OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_os_search_gateways(os_search_engine_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :param OSSearchEngineAddGatewaysReq body: os search gateways info (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_os_search_gateways_with_http_info(os_search_engine_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_os_search_gateways_with_http_info(os_search_engine_id, body, **kwargs)  # noqa: E501
            return data

    def add_os_search_gateways_with_http_info(self, os_search_engine_id, body, **kwargs):  # noqa: E501
        """add_os_search_gateways  # noqa: E501

        Create new OS Search gateways on OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_os_search_gateways_with_http_info(os_search_engine_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :param OSSearchEngineAddGatewaysReq body: os search gateways info (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_os_search_gateways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_search_engine_id' is set
        if ('os_search_engine_id' not in params or
                params['os_search_engine_id'] is None):
            raise ValueError("Missing the required parameter `os_search_engine_id` when calling `add_os_search_gateways`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_os_search_gateways`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_search_engine_id' in params:
            path_params['os_search_engine_id'] = params['os_search_engine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/{os_search_engine_id}:add-os-search-gateways', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_os_search_engine(self, os_search_engine_id, body, **kwargs):  # noqa: E501
        """change_os_search_engine  # noqa: E501

        change OS search engine falvor or data size  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_os_search_engine(os_search_engine_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :param OSSearchEngineUpdateReq body: os search gateways info (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_os_search_engine_with_http_info(os_search_engine_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.change_os_search_engine_with_http_info(os_search_engine_id, body, **kwargs)  # noqa: E501
            return data

    def change_os_search_engine_with_http_info(self, os_search_engine_id, body, **kwargs):  # noqa: E501
        """change_os_search_engine  # noqa: E501

        change OS search engine falvor or data size  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_os_search_engine_with_http_info(os_search_engine_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :param OSSearchEngineUpdateReq body: os search gateways info (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_os_search_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_search_engine_id' is set
        if ('os_search_engine_id' not in params or
                params['os_search_engine_id'] is None):
            raise ValueError("Missing the required parameter `os_search_engine_id` when calling `change_os_search_engine`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_os_search_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_search_engine_id' in params:
            path_params['os_search_engine_id'] = params['os_search_engine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/{os_search_engine_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_os_search_engine(self, body, **kwargs):  # noqa: E501
        """create_os_search_engine  # noqa: E501

        Create OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_os_search_engine(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param OSSearchEngineCreateReq body: OS search engine info (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_os_search_engine_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_os_search_engine_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_os_search_engine_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_os_search_engine  # noqa: E501

        Create OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_os_search_engine_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param OSSearchEngineCreateReq body: OS search engine info (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_os_search_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_os_search_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_os_search_engine(self, os_search_engine_id, **kwargs):  # noqa: E501
        """delete_os_search_engine  # noqa: E501

        delete OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_os_search_engine(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_os_search_engine_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_os_search_engine_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
            return data

    def delete_os_search_engine_with_http_info(self, os_search_engine_id, **kwargs):  # noqa: E501
        """delete_os_search_engine  # noqa: E501

        delete OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_os_search_engine_with_http_info(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_os_search_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_search_engine_id' is set
        if ('os_search_engine_id' not in params or
                params['os_search_engine_id'] is None):
            raise ValueError("Missing the required parameter `os_search_engine_id` when calling `delete_os_search_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_search_engine_id' in params:
            path_params['os_search_engine_id'] = params['os_search_engine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/{os_search_engine_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_os_search_engine(self, os_search_engine_id, **kwargs):  # noqa: E501
        """get_os_search_engine  # noqa: E501

        Get a OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_os_search_engine(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_os_search_engine_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_os_search_engine_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
            return data

    def get_os_search_engine_with_http_info(self, os_search_engine_id, **kwargs):  # noqa: E501
        """get_os_search_engine  # noqa: E501

        Get a OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_os_search_engine_with_http_info(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_os_search_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_search_engine_id' is set
        if ('os_search_engine_id' not in params or
                params['os_search_engine_id'] is None):
            raise ValueError("Missing the required parameter `os_search_engine_id` when calling `get_os_search_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_search_engine_id' in params:
            path_params['os_search_engine_id'] = params['os_search_engine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/{os_search_engine_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_os_search_engine_samples(self, os_search_engine_id, **kwargs):  # noqa: E501
        """get_os_search_engine_samples  # noqa: E501

        get an object storage search engine's samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_os_search_engine_samples(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: OSSearchEngineSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_os_search_engine_samples_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_os_search_engine_samples_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
            return data

    def get_os_search_engine_samples_with_http_info(self, os_search_engine_id, **kwargs):  # noqa: E501
        """get_os_search_engine_samples  # noqa: E501

        get an object storage search engine's samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_os_search_engine_samples_with_http_info(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: OSSearchEngineSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id', 'duration_begin', 'duration_end', 'period']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_os_search_engine_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_search_engine_id' is set
        if ('os_search_engine_id' not in params or
                params['os_search_engine_id'] is None):
            raise ValueError("Missing the required parameter `os_search_engine_id` when calling `get_os_search_engine_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_search_engine_id' in params:
            path_params['os_search_engine_id'] = params['os_search_engine_id']  # noqa: E501

        query_params = []
        if 'duration_begin' in params:
            query_params.append(('duration_begin', params['duration_begin']))  # noqa: E501
        if 'duration_end' in params:
            query_params.append(('duration_end', params['duration_end']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/{os_search_engine_id}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineSamplesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_os_search_engines(self, **kwargs):  # noqa: E501
        """list_os_search_engines  # noqa: E501

        List OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_os_search_engines(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: paging param
        :param int offset: paging param
        :return: OSSearchEnginesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_os_search_engines_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_os_search_engines_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_os_search_engines_with_http_info(self, **kwargs):  # noqa: E501
        """list_os_search_engines  # noqa: E501

        List OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_os_search_engines_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: paging param
        :param int offset: paging param
        :return: OSSearchEnginesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_os_search_engines" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEnginesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_os_search_gateways(self, os_search_engine_id, body, **kwargs):  # noqa: E501
        """remove_os_search_gateways  # noqa: E501

        remove OS search gateways from OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_os_search_gateways(os_search_engine_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :param OSSearchEngineRemoveGatewaysReq body: os search gateways info (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_os_search_gateways_with_http_info(os_search_engine_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_os_search_gateways_with_http_info(os_search_engine_id, body, **kwargs)  # noqa: E501
            return data

    def remove_os_search_gateways_with_http_info(self, os_search_engine_id, body, **kwargs):  # noqa: E501
        """remove_os_search_gateways  # noqa: E501

        remove OS search gateways from OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_os_search_gateways_with_http_info(os_search_engine_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :param OSSearchEngineRemoveGatewaysReq body: os search gateways info (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_os_search_gateways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_search_engine_id' is set
        if ('os_search_engine_id' not in params or
                params['os_search_engine_id'] is None):
            raise ValueError("Missing the required parameter `os_search_engine_id` when calling `remove_os_search_gateways`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_os_search_gateways`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_search_engine_id' in params:
            path_params['os_search_engine_id'] = params['os_search_engine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/{os_search_engine_id}:remove-os-search-gateways', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_os_search_engine(self, os_search_engine_id, **kwargs):  # noqa: E501
        """start_os_search_engine  # noqa: E501

        start OS search gateways from OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_os_search_engine(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_os_search_engine_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_os_search_engine_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
            return data

    def start_os_search_engine_with_http_info(self, os_search_engine_id, **kwargs):  # noqa: E501
        """start_os_search_engine  # noqa: E501

        start OS search gateways from OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_os_search_engine_with_http_info(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_os_search_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_search_engine_id' is set
        if ('os_search_engine_id' not in params or
                params['os_search_engine_id'] is None):
            raise ValueError("Missing the required parameter `os_search_engine_id` when calling `start_os_search_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_search_engine_id' in params:
            path_params['os_search_engine_id'] = params['os_search_engine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/{os_search_engine_id}:start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_os_search_engine(self, os_search_engine_id, **kwargs):  # noqa: E501
        """stop_os_search_engine  # noqa: E501

        stop OS search gateways from OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stop_os_search_engine(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.stop_os_search_engine_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_os_search_engine_with_http_info(os_search_engine_id, **kwargs)  # noqa: E501
            return data

    def stop_os_search_engine_with_http_info(self, os_search_engine_id, **kwargs):  # noqa: E501
        """stop_os_search_engine  # noqa: E501

        stop OS search gateways from OS search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stop_os_search_engine_with_http_info(os_search_engine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int os_search_engine_id: OS search engine id (required)
        :return: OSSearchEngineResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_search_engine_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_os_search_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_search_engine_id' is set
        if ('os_search_engine_id' not in params or
                params['os_search_engine_id'] is None):
            raise ValueError("Missing the required parameter `os_search_engine_id` when calling `stop_os_search_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_search_engine_id' in params:
            path_params['os_search_engine_id'] = params['os_search_engine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/os-search-engines/{os_search_engine_id}:stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSSearchEngineResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

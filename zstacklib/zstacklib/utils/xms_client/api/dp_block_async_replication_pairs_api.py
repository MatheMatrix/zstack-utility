# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from zstacklib.utils.xms_client.api_client import ApiClient


class DpBlockAsyncReplicationPairsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def async_failover_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """async_failover_dp_block_async_replication_pair  # noqa: E501

        switch the roles of the pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.async_failover_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.async_failover_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.async_failover_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def async_failover_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """async_failover_dp_block_async_replication_pair  # noqa: E501

        switch the roles of the pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.async_failover_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method async_failover_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `async_failover_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}:async-failover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dp_block_async_replication_pair(self, body, **kwargs):  # noqa: E501
        """create_dp_block_async_replication_pair  # noqa: E501

        Create dp block async replication pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dp_block_async_replication_pair(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DpBlockAsyncReplicationPairCreateReq body: pair info (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_dp_block_async_replication_pair_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dp_block_async_replication_pair_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_dp_block_async_replication_pair_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_dp_block_async_replication_pair  # noqa: E501

        Create dp block async replication pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dp_block_async_replication_pair_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DpBlockAsyncReplicationPairCreateReq body: pair info (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """delete_dp_block_async_replication_pair  # noqa: E501

        Delete dp block async replication pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :param bool reserve_volume: reserve replicated volume or not
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def delete_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """delete_dp_block_async_replication_pair  # noqa: E501

        Delete dp block async replication pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :param bool reserve_volume: reserve replicated volume or not
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id', 'reserve_volume']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `delete_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []
        if 'reserve_volume' in params:
            query_params.append(('reserve_volume', params['reserve_volume']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def failback_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """failback_dp_block_async_replication_pair  # noqa: E501

        switch the roles of the pair to synced  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.failback_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.failback_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.failback_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def failback_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """failback_dp_block_async_replication_pair  # noqa: E501

        switch the roles of the pair to synced  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.failback_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method failback_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `failback_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}:failback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """get_dp_block_async_replication_pair  # noqa: E501

        Get dp block async replication pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def get_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """get_dp_block_async_replication_pair  # noqa: E501

        Get dp block async replication pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `get_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dp_block_async_replication_pair(self, **kwargs):  # noqa: E501
        """list_dp_block_async_replication_pair  # noqa: E501

        List dp block async replication pairs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dp_block_async_replication_pair(async=True)
        >>> result = thread.get()

        :param async bool
        :param int block_volume_id: show volume snapshot replication pairs of specific block volume
        :param int dp_block_async_replication_policy_id: show volume snapshot replication pairs of specific block async replication policy
        :return: DpBlockAsyncReplicationPairsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_dp_block_async_replication_pair_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_dp_block_async_replication_pair_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_dp_block_async_replication_pair_with_http_info(self, **kwargs):  # noqa: E501
        """list_dp_block_async_replication_pair  # noqa: E501

        List dp block async replication pairs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dp_block_async_replication_pair_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int block_volume_id: show volume snapshot replication pairs of specific block volume
        :param int dp_block_async_replication_policy_id: show volume snapshot replication pairs of specific block async replication policy
        :return: DpBlockAsyncReplicationPairsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['block_volume_id', 'dp_block_async_replication_policy_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'block_volume_id' in params:
            query_params.append(('block_volume_id', params['block_volume_id']))  # noqa: E501
        if 'dp_block_async_replication_policy_id' in params:
            query_params.append(('dp_block_async_replication_policy_id', params['dp_block_async_replication_policy_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairsResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """pause_dp_block_async_replication_pair  # noqa: E501

        pause periodic sync  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.pause_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.pause_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pause_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def pause_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """pause_dp_block_async_replication_pair  # noqa: E501

        pause periodic sync  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.pause_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `pause_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}:pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """resume_dp_block_async_replication_pair  # noqa: E501

        resume periodic sync  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resume_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resume_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def resume_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """resume_dp_block_async_replication_pair  # noqa: E501

        resume periodic sync  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resume_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `resume_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}:resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rollback_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """rollback_dp_block_async_replication_pair  # noqa: E501

        rollback volume snapshot pair to previous snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rollback_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rollback_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rollback_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def rollback_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """rollback_dp_block_async_replication_pair  # noqa: E501

        rollback volume snapshot pair to previous snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rollback_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rollback_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `rollback_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}:rollback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """sync_dp_block_async_replication_pair  # noqa: E501

        sync pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sync_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def sync_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """sync_dp_block_async_replication_pair  # noqa: E501

        sync pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `sync_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}:sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_failover_dp_block_async_replication_pair(self, pair_id, **kwargs):  # noqa: E501
        """sync_failover_dp_block_async_replication_pair  # noqa: E501

        switch the roles of the pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_failover_dp_block_async_replication_pair(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sync_failover_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_failover_dp_block_async_replication_pair_with_http_info(pair_id, **kwargs)  # noqa: E501
            return data

    def sync_failover_dp_block_async_replication_pair_with_http_info(self, pair_id, **kwargs):  # noqa: E501
        """sync_failover_dp_block_async_replication_pair  # noqa: E501

        switch the roles of the pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_failover_dp_block_async_replication_pair_with_http_info(pair_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_failover_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `sync_failover_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}:sync-failover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dp_block_async_replication_pair(self, pair_id, body, **kwargs):  # noqa: E501
        """update_dp_block_async_replication_pair  # noqa: E501

        Update dp block async replication pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dp_block_async_replication_pair(pair_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :param DpBlockAsyncReplicationPairUpdateReq body: pair info (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_dp_block_async_replication_pair_with_http_info(pair_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dp_block_async_replication_pair_with_http_info(pair_id, body, **kwargs)  # noqa: E501
            return data

    def update_dp_block_async_replication_pair_with_http_info(self, pair_id, body, **kwargs):  # noqa: E501
        """update_dp_block_async_replication_pair  # noqa: E501

        Update dp block async replication pair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dp_block_async_replication_pair_with_http_info(pair_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int pair_id: resource id (required)
        :param DpBlockAsyncReplicationPairUpdateReq body: pair info (required)
        :return: DpBlockAsyncReplicationPairResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dp_block_async_replication_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_id' is set
        if ('pair_id' not in params or
                params['pair_id'] is None):
            raise ValueError("Missing the required parameter `pair_id` when calling `update_dp_block_async_replication_pair`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dp_block_async_replication_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair_id' in params:
            path_params['pair_id'] = params['pair_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dp-block-async-replication-pairs/{pair_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DpBlockAsyncReplicationPairResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

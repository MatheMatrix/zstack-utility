# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.matching_rule import MatchingRule  # noqa: F401,E501


class RuleMatchingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'matching_rules': 'list[MatchingRule]',
        'mismatching_action': 'str'
    }

    attribute_map = {
        'matching_rules': 'matching_rules',
        'mismatching_action': 'mismatching_action'
    }

    def __init__(self, matching_rules=None, mismatching_action=None):  # noqa: E501
        """RuleMatchingInfo - a model defined in Swagger"""  # noqa: E501

        self._matching_rules = None
        self._mismatching_action = None
        self.discriminator = None

        if matching_rules is not None:
            self.matching_rules = matching_rules
        if mismatching_action is not None:
            self.mismatching_action = mismatching_action

    @property
    def matching_rules(self):
        """Gets the matching_rules of this RuleMatchingInfo.  # noqa: E501


        :return: The matching_rules of this RuleMatchingInfo.  # noqa: E501
        :rtype: list[MatchingRule]
        """
        return self._matching_rules

    @matching_rules.setter
    def matching_rules(self, matching_rules):
        """Sets the matching_rules of this RuleMatchingInfo.


        :param matching_rules: The matching_rules of this RuleMatchingInfo.  # noqa: E501
        :type: list[MatchingRule]
        """

        self._matching_rules = matching_rules

    @property
    def mismatching_action(self):
        """Gets the mismatching_action of this RuleMatchingInfo.  # noqa: E501


        :return: The mismatching_action of this RuleMatchingInfo.  # noqa: E501
        :rtype: str
        """
        return self._mismatching_action

    @mismatching_action.setter
    def mismatching_action(self, mismatching_action):
        """Sets the mismatching_action of this RuleMatchingInfo.


        :param mismatching_action: The mismatching_action of this RuleMatchingInfo.  # noqa: E501
        :type: str
        """

        self._mismatching_action = mismatching_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleMatchingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OSReplicationZoneStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth_kbyte': 'float',
        'create': 'datetime',
        'object_kbytes_ps': 'float',
        'objects_pm': 'float',
        'total_bytes': 'int',
        'total_object_bytes': 'int',
        'total_objects': 'int'
    }

    attribute_map = {
        'bandwidth_kbyte': 'bandwidth_kbyte',
        'create': 'create',
        'object_kbytes_ps': 'object_kbytes_ps',
        'objects_pm': 'objects_pm',
        'total_bytes': 'total_bytes',
        'total_object_bytes': 'total_object_bytes',
        'total_objects': 'total_objects'
    }

    def __init__(self, bandwidth_kbyte=None, create=None, object_kbytes_ps=None, objects_pm=None, total_bytes=None, total_object_bytes=None, total_objects=None):  # noqa: E501
        """OSReplicationZoneStat - a model defined in Swagger"""  # noqa: E501

        self._bandwidth_kbyte = None
        self._create = None
        self._object_kbytes_ps = None
        self._objects_pm = None
        self._total_bytes = None
        self._total_object_bytes = None
        self._total_objects = None
        self.discriminator = None

        if bandwidth_kbyte is not None:
            self.bandwidth_kbyte = bandwidth_kbyte
        if create is not None:
            self.create = create
        if object_kbytes_ps is not None:
            self.object_kbytes_ps = object_kbytes_ps
        if objects_pm is not None:
            self.objects_pm = objects_pm
        if total_bytes is not None:
            self.total_bytes = total_bytes
        if total_object_bytes is not None:
            self.total_object_bytes = total_object_bytes
        if total_objects is not None:
            self.total_objects = total_objects

    @property
    def bandwidth_kbyte(self):
        """Gets the bandwidth_kbyte of this OSReplicationZoneStat.  # noqa: E501


        :return: The bandwidth_kbyte of this OSReplicationZoneStat.  # noqa: E501
        :rtype: float
        """
        return self._bandwidth_kbyte

    @bandwidth_kbyte.setter
    def bandwidth_kbyte(self, bandwidth_kbyte):
        """Sets the bandwidth_kbyte of this OSReplicationZoneStat.


        :param bandwidth_kbyte: The bandwidth_kbyte of this OSReplicationZoneStat.  # noqa: E501
        :type: float
        """

        self._bandwidth_kbyte = bandwidth_kbyte

    @property
    def create(self):
        """Gets the create of this OSReplicationZoneStat.  # noqa: E501


        :return: The create of this OSReplicationZoneStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSReplicationZoneStat.


        :param create: The create of this OSReplicationZoneStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def object_kbytes_ps(self):
        """Gets the object_kbytes_ps of this OSReplicationZoneStat.  # noqa: E501


        :return: The object_kbytes_ps of this OSReplicationZoneStat.  # noqa: E501
        :rtype: float
        """
        return self._object_kbytes_ps

    @object_kbytes_ps.setter
    def object_kbytes_ps(self, object_kbytes_ps):
        """Sets the object_kbytes_ps of this OSReplicationZoneStat.


        :param object_kbytes_ps: The object_kbytes_ps of this OSReplicationZoneStat.  # noqa: E501
        :type: float
        """

        self._object_kbytes_ps = object_kbytes_ps

    @property
    def objects_pm(self):
        """Gets the objects_pm of this OSReplicationZoneStat.  # noqa: E501


        :return: The objects_pm of this OSReplicationZoneStat.  # noqa: E501
        :rtype: float
        """
        return self._objects_pm

    @objects_pm.setter
    def objects_pm(self, objects_pm):
        """Sets the objects_pm of this OSReplicationZoneStat.


        :param objects_pm: The objects_pm of this OSReplicationZoneStat.  # noqa: E501
        :type: float
        """

        self._objects_pm = objects_pm

    @property
    def total_bytes(self):
        """Gets the total_bytes of this OSReplicationZoneStat.  # noqa: E501


        :return: The total_bytes of this OSReplicationZoneStat.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this OSReplicationZoneStat.


        :param total_bytes: The total_bytes of this OSReplicationZoneStat.  # noqa: E501
        :type: int
        """

        self._total_bytes = total_bytes

    @property
    def total_object_bytes(self):
        """Gets the total_object_bytes of this OSReplicationZoneStat.  # noqa: E501


        :return: The total_object_bytes of this OSReplicationZoneStat.  # noqa: E501
        :rtype: int
        """
        return self._total_object_bytes

    @total_object_bytes.setter
    def total_object_bytes(self, total_object_bytes):
        """Sets the total_object_bytes of this OSReplicationZoneStat.


        :param total_object_bytes: The total_object_bytes of this OSReplicationZoneStat.  # noqa: E501
        :type: int
        """

        self._total_object_bytes = total_object_bytes

    @property
    def total_objects(self):
        """Gets the total_objects of this OSReplicationZoneStat.  # noqa: E501


        :return: The total_objects of this OSReplicationZoneStat.  # noqa: E501
        :rtype: int
        """
        return self._total_objects

    @total_objects.setter
    def total_objects(self, total_objects):
        """Sets the total_objects of this OSReplicationZoneStat.


        :param total_objects: The total_objects of this OSReplicationZoneStat.  # noqa: E501
        :type: int
        """

        self._total_objects = total_objects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSReplicationZoneStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

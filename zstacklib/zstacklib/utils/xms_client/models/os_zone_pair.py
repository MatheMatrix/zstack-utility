# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OSZonePair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'clock_diff': 'int',
        'create': 'datetime',
        'source_zone_uuid': 'str',
        'target_zone_uuid': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'id': 'ID',
        'clock_diff': 'clock_diff',
        'create': 'create',
        'source_zone_uuid': 'source_zone_uuid',
        'target_zone_uuid': 'target_zone_uuid',
        'update': 'update'
    }

    def __init__(self, id=None, clock_diff=None, create=None, source_zone_uuid=None, target_zone_uuid=None, update=None):  # noqa: E501
        """OSZonePair - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._clock_diff = None
        self._create = None
        self._source_zone_uuid = None
        self._target_zone_uuid = None
        self._update = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if clock_diff is not None:
            self.clock_diff = clock_diff
        if create is not None:
            self.create = create
        if source_zone_uuid is not None:
            self.source_zone_uuid = source_zone_uuid
        if target_zone_uuid is not None:
            self.target_zone_uuid = target_zone_uuid
        if update is not None:
            self.update = update

    @property
    def id(self):
        """Gets the id of this OSZonePair.  # noqa: E501


        :return: The id of this OSZonePair.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSZonePair.


        :param id: The id of this OSZonePair.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def clock_diff(self):
        """Gets the clock_diff of this OSZonePair.  # noqa: E501


        :return: The clock_diff of this OSZonePair.  # noqa: E501
        :rtype: int
        """
        return self._clock_diff

    @clock_diff.setter
    def clock_diff(self, clock_diff):
        """Sets the clock_diff of this OSZonePair.


        :param clock_diff: The clock_diff of this OSZonePair.  # noqa: E501
        :type: int
        """

        self._clock_diff = clock_diff

    @property
    def create(self):
        """Gets the create of this OSZonePair.  # noqa: E501


        :return: The create of this OSZonePair.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSZonePair.


        :param create: The create of this OSZonePair.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def source_zone_uuid(self):
        """Gets the source_zone_uuid of this OSZonePair.  # noqa: E501


        :return: The source_zone_uuid of this OSZonePair.  # noqa: E501
        :rtype: str
        """
        return self._source_zone_uuid

    @source_zone_uuid.setter
    def source_zone_uuid(self, source_zone_uuid):
        """Sets the source_zone_uuid of this OSZonePair.


        :param source_zone_uuid: The source_zone_uuid of this OSZonePair.  # noqa: E501
        :type: str
        """

        self._source_zone_uuid = source_zone_uuid

    @property
    def target_zone_uuid(self):
        """Gets the target_zone_uuid of this OSZonePair.  # noqa: E501


        :return: The target_zone_uuid of this OSZonePair.  # noqa: E501
        :rtype: str
        """
        return self._target_zone_uuid

    @target_zone_uuid.setter
    def target_zone_uuid(self, target_zone_uuid):
        """Sets the target_zone_uuid of this OSZonePair.


        :param target_zone_uuid: The target_zone_uuid of this OSZonePair.  # noqa: E501
        :type: str
        """

        self._target_zone_uuid = target_zone_uuid

    @property
    def update(self):
        """Gets the update of this OSZonePair.  # noqa: E501


        :return: The update of this OSZonePair.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this OSZonePair.


        :param update: The update of this OSZonePair.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSZonePair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

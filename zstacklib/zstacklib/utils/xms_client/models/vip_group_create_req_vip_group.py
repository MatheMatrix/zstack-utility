# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.vip_group_create_req_vip_group_vi_ps_elt import VIPGroupCreateReqVIPGroupVIPsElt  # noqa: F401,E501


class VIPGroupCreateReqVIPGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network': 'str',
        'preempt': 'bool',
        'resource_id': 'int',
        'resource_type': 'str',
        'vips': 'list[VIPGroupCreateReqVIPGroupVIPsElt]'
    }

    attribute_map = {
        'network': 'network',
        'preempt': 'preempt',
        'resource_id': 'resource_id',
        'resource_type': 'resource_type',
        'vips': 'vips'
    }

    def __init__(self, network=None, preempt=None, resource_id=None, resource_type=None, vips=None):  # noqa: E501
        """VIPGroupCreateReqVIPGroup - a model defined in Swagger"""  # noqa: E501

        self._network = None
        self._preempt = None
        self._resource_id = None
        self._resource_type = None
        self._vips = None
        self.discriminator = None

        self.network = network
        if preempt is not None:
            self.preempt = preempt
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.vips = vips

    @property
    def network(self):
        """Gets the network of this VIPGroupCreateReqVIPGroup.  # noqa: E501


        :return: The network of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VIPGroupCreateReqVIPGroup.


        :param network: The network of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :type: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def preempt(self):
        """Gets the preempt of this VIPGroupCreateReqVIPGroup.  # noqa: E501


        :return: The preempt of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :rtype: bool
        """
        return self._preempt

    @preempt.setter
    def preempt(self, preempt):
        """Sets the preempt of this VIPGroupCreateReqVIPGroup.


        :param preempt: The preempt of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :type: bool
        """

        self._preempt = preempt

    @property
    def resource_id(self):
        """Gets the resource_id of this VIPGroupCreateReqVIPGroup.  # noqa: E501


        :return: The resource_id of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :rtype: int
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this VIPGroupCreateReqVIPGroup.


        :param resource_id: The resource_id of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :type: int
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this VIPGroupCreateReqVIPGroup.  # noqa: E501


        :return: The resource_type of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this VIPGroupCreateReqVIPGroup.


        :param resource_type: The resource_type of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def vips(self):
        """Gets the vips of this VIPGroupCreateReqVIPGroup.  # noqa: E501


        :return: The vips of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :rtype: list[VIPGroupCreateReqVIPGroupVIPsElt]
        """
        return self._vips

    @vips.setter
    def vips(self, vips):
        """Sets the vips of this VIPGroupCreateReqVIPGroup.


        :param vips: The vips of this VIPGroupCreateReqVIPGroup.  # noqa: E501
        :type: list[VIPGroupCreateReqVIPGroupVIPsElt]
        """
        if vips is None:
            raise ValueError("Invalid value for `vips`, must not be `None`")  # noqa: E501

        self._vips = vips

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VIPGroupCreateReqVIPGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

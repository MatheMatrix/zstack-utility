# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.fs_user_nestview import FSUserNestview  # noqa: F401,E501


class FSUserGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'create': 'datetime',
        'fs_users': 'list[FSUserNestview]',
        'id': 'int',
        'name': 'str',
        'update': 'datetime',
        'user_num': 'int'
    }

    attribute_map = {
        'action_status': 'action_status',
        'create': 'create',
        'fs_users': 'fs_users',
        'id': 'id',
        'name': 'name',
        'update': 'update',
        'user_num': 'user_num'
    }

    def __init__(self, action_status=None, create=None, fs_users=None, id=None, name=None, update=None, user_num=None):  # noqa: E501
        """FSUserGroup - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._create = None
        self._fs_users = None
        self._id = None
        self._name = None
        self._update = None
        self._user_num = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if create is not None:
            self.create = create
        if fs_users is not None:
            self.fs_users = fs_users
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if update is not None:
            self.update = update
        if user_num is not None:
            self.user_num = user_num

    @property
    def action_status(self):
        """Gets the action_status of this FSUserGroup.  # noqa: E501


        :return: The action_status of this FSUserGroup.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this FSUserGroup.


        :param action_status: The action_status of this FSUserGroup.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def create(self):
        """Gets the create of this FSUserGroup.  # noqa: E501


        :return: The create of this FSUserGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this FSUserGroup.


        :param create: The create of this FSUserGroup.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def fs_users(self):
        """Gets the fs_users of this FSUserGroup.  # noqa: E501


        :return: The fs_users of this FSUserGroup.  # noqa: E501
        :rtype: list[FSUserNestview]
        """
        return self._fs_users

    @fs_users.setter
    def fs_users(self, fs_users):
        """Sets the fs_users of this FSUserGroup.


        :param fs_users: The fs_users of this FSUserGroup.  # noqa: E501
        :type: list[FSUserNestview]
        """

        self._fs_users = fs_users

    @property
    def id(self):
        """Gets the id of this FSUserGroup.  # noqa: E501


        :return: The id of this FSUserGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FSUserGroup.


        :param id: The id of this FSUserGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FSUserGroup.  # noqa: E501


        :return: The name of this FSUserGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FSUserGroup.


        :param name: The name of this FSUserGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def update(self):
        """Gets the update of this FSUserGroup.  # noqa: E501


        :return: The update of this FSUserGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this FSUserGroup.


        :param update: The update of this FSUserGroup.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def user_num(self):
        """Gets the user_num of this FSUserGroup.  # noqa: E501


        :return: The user_num of this FSUserGroup.  # noqa: E501
        :rtype: int
        """
        return self._user_num

    @user_num.setter
    def user_num(self, user_num):
        """Sets the user_num of this FSUserGroup.


        :param user_num: The user_num of this FSUserGroup.  # noqa: E501
        :type: int
        """

        self._user_num = user_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSUserGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

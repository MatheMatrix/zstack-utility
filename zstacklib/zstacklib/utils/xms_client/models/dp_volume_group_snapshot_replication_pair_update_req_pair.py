# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DpVolumeGroupSnapshotReplicationPairUpdateReqPair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'master_policy_cron': 'str',
        'master_volume_group_name': 'str',
        'slave_volume_group_id': 'int',
        'status': 'str'
    }

    attribute_map = {
        'master_policy_cron': 'master_policy_cron',
        'master_volume_group_name': 'master_volume_group_name',
        'slave_volume_group_id': 'slave_volume_group_id',
        'status': 'status'
    }

    def __init__(self, master_policy_cron=None, master_volume_group_name=None, slave_volume_group_id=None, status=None):  # noqa: E501
        """DpVolumeGroupSnapshotReplicationPairUpdateReqPair - a model defined in Swagger"""  # noqa: E501

        self._master_policy_cron = None
        self._master_volume_group_name = None
        self._slave_volume_group_id = None
        self._status = None
        self.discriminator = None

        if master_policy_cron is not None:
            self.master_policy_cron = master_policy_cron
        if master_volume_group_name is not None:
            self.master_volume_group_name = master_volume_group_name
        if slave_volume_group_id is not None:
            self.slave_volume_group_id = slave_volume_group_id
        if status is not None:
            self.status = status

    @property
    def master_policy_cron(self):
        """Gets the master_policy_cron of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501

        policy cron  # noqa: E501

        :return: The master_policy_cron of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501
        :rtype: str
        """
        return self._master_policy_cron

    @master_policy_cron.setter
    def master_policy_cron(self, master_policy_cron):
        """Sets the master_policy_cron of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.

        policy cron  # noqa: E501

        :param master_policy_cron: The master_policy_cron of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501
        :type: str
        """

        self._master_policy_cron = master_policy_cron

    @property
    def master_volume_group_name(self):
        """Gets the master_volume_group_name of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501

        master volume group name  # noqa: E501

        :return: The master_volume_group_name of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501
        :rtype: str
        """
        return self._master_volume_group_name

    @master_volume_group_name.setter
    def master_volume_group_name(self, master_volume_group_name):
        """Sets the master_volume_group_name of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.

        master volume group name  # noqa: E501

        :param master_volume_group_name: The master_volume_group_name of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501
        :type: str
        """

        self._master_volume_group_name = master_volume_group_name

    @property
    def slave_volume_group_id(self):
        """Gets the slave_volume_group_id of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501

        slave volume group id  # noqa: E501

        :return: The slave_volume_group_id of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501
        :rtype: int
        """
        return self._slave_volume_group_id

    @slave_volume_group_id.setter
    def slave_volume_group_id(self, slave_volume_group_id):
        """Sets the slave_volume_group_id of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.

        slave volume group id  # noqa: E501

        :param slave_volume_group_id: The slave_volume_group_id of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501
        :type: int
        """

        self._slave_volume_group_id = slave_volume_group_id

    @property
    def status(self):
        """Gets the status of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501

        pair status  # noqa: E501

        :return: The status of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.

        pair status  # noqa: E501

        :param status: The status of this DpVolumeGroupSnapshotReplicationPairUpdateReqPair.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpVolumeGroupSnapshotReplicationPairUpdateReqPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.fssmb_share_acl_req import FSSMBShareACLReq  # noqa: F401,E501


class FSSMBShareCreateReqShare(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acl_inherited': 'bool',
        'case_sensitive': 'bool',
        'fs_folder_id': 'int',
        'fs_gateway_group_id': 'int',
        'fs_quota_tree_id': 'int',
        'fs_smb_share_acls': 'list[FSSMBShareACLReq]',
        'name': 'str',
        'recycled': 'bool'
    }

    attribute_map = {
        'acl_inherited': 'acl_inherited',
        'case_sensitive': 'case_sensitive',
        'fs_folder_id': 'fs_folder_id',
        'fs_gateway_group_id': 'fs_gateway_group_id',
        'fs_quota_tree_id': 'fs_quota_tree_id',
        'fs_smb_share_acls': 'fs_smb_share_acls',
        'name': 'name',
        'recycled': 'recycled'
    }

    def __init__(self, acl_inherited=None, case_sensitive=None, fs_folder_id=None, fs_gateway_group_id=None, fs_quota_tree_id=None, fs_smb_share_acls=None, name=None, recycled=None):  # noqa: E501
        """FSSMBShareCreateReqShare - a model defined in Swagger"""  # noqa: E501

        self._acl_inherited = None
        self._case_sensitive = None
        self._fs_folder_id = None
        self._fs_gateway_group_id = None
        self._fs_quota_tree_id = None
        self._fs_smb_share_acls = None
        self._name = None
        self._recycled = None
        self.discriminator = None

        if acl_inherited is not None:
            self.acl_inherited = acl_inherited
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive
        self.fs_folder_id = fs_folder_id
        self.fs_gateway_group_id = fs_gateway_group_id
        if fs_quota_tree_id is not None:
            self.fs_quota_tree_id = fs_quota_tree_id
        if fs_smb_share_acls is not None:
            self.fs_smb_share_acls = fs_smb_share_acls
        if name is not None:
            self.name = name
        if recycled is not None:
            self.recycled = recycled

    @property
    def acl_inherited(self):
        """Gets the acl_inherited of this FSSMBShareCreateReqShare.  # noqa: E501

        default acl status  # noqa: E501

        :return: The acl_inherited of this FSSMBShareCreateReqShare.  # noqa: E501
        :rtype: bool
        """
        return self._acl_inherited

    @acl_inherited.setter
    def acl_inherited(self, acl_inherited):
        """Sets the acl_inherited of this FSSMBShareCreateReqShare.

        default acl status  # noqa: E501

        :param acl_inherited: The acl_inherited of this FSSMBShareCreateReqShare.  # noqa: E501
        :type: bool
        """

        self._acl_inherited = acl_inherited

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this FSSMBShareCreateReqShare.  # noqa: E501

        case sensitive  # noqa: E501

        :return: The case_sensitive of this FSSMBShareCreateReqShare.  # noqa: E501
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this FSSMBShareCreateReqShare.

        case sensitive  # noqa: E501

        :param case_sensitive: The case_sensitive of this FSSMBShareCreateReqShare.  # noqa: E501
        :type: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def fs_folder_id(self):
        """Gets the fs_folder_id of this FSSMBShareCreateReqShare.  # noqa: E501

        folder id  # noqa: E501

        :return: The fs_folder_id of this FSSMBShareCreateReqShare.  # noqa: E501
        :rtype: int
        """
        return self._fs_folder_id

    @fs_folder_id.setter
    def fs_folder_id(self, fs_folder_id):
        """Sets the fs_folder_id of this FSSMBShareCreateReqShare.

        folder id  # noqa: E501

        :param fs_folder_id: The fs_folder_id of this FSSMBShareCreateReqShare.  # noqa: E501
        :type: int
        """
        if fs_folder_id is None:
            raise ValueError("Invalid value for `fs_folder_id`, must not be `None`")  # noqa: E501

        self._fs_folder_id = fs_folder_id

    @property
    def fs_gateway_group_id(self):
        """Gets the fs_gateway_group_id of this FSSMBShareCreateReqShare.  # noqa: E501

        gateway group id  # noqa: E501

        :return: The fs_gateway_group_id of this FSSMBShareCreateReqShare.  # noqa: E501
        :rtype: int
        """
        return self._fs_gateway_group_id

    @fs_gateway_group_id.setter
    def fs_gateway_group_id(self, fs_gateway_group_id):
        """Sets the fs_gateway_group_id of this FSSMBShareCreateReqShare.

        gateway group id  # noqa: E501

        :param fs_gateway_group_id: The fs_gateway_group_id of this FSSMBShareCreateReqShare.  # noqa: E501
        :type: int
        """
        if fs_gateway_group_id is None:
            raise ValueError("Invalid value for `fs_gateway_group_id`, must not be `None`")  # noqa: E501

        self._fs_gateway_group_id = fs_gateway_group_id

    @property
    def fs_quota_tree_id(self):
        """Gets the fs_quota_tree_id of this FSSMBShareCreateReqShare.  # noqa: E501

        quota tree id  # noqa: E501

        :return: The fs_quota_tree_id of this FSSMBShareCreateReqShare.  # noqa: E501
        :rtype: int
        """
        return self._fs_quota_tree_id

    @fs_quota_tree_id.setter
    def fs_quota_tree_id(self, fs_quota_tree_id):
        """Sets the fs_quota_tree_id of this FSSMBShareCreateReqShare.

        quota tree id  # noqa: E501

        :param fs_quota_tree_id: The fs_quota_tree_id of this FSSMBShareCreateReqShare.  # noqa: E501
        :type: int
        """

        self._fs_quota_tree_id = fs_quota_tree_id

    @property
    def fs_smb_share_acls(self):
        """Gets the fs_smb_share_acls of this FSSMBShareCreateReqShare.  # noqa: E501

        access control array  # noqa: E501

        :return: The fs_smb_share_acls of this FSSMBShareCreateReqShare.  # noqa: E501
        :rtype: list[FSSMBShareACLReq]
        """
        return self._fs_smb_share_acls

    @fs_smb_share_acls.setter
    def fs_smb_share_acls(self, fs_smb_share_acls):
        """Sets the fs_smb_share_acls of this FSSMBShareCreateReqShare.

        access control array  # noqa: E501

        :param fs_smb_share_acls: The fs_smb_share_acls of this FSSMBShareCreateReqShare.  # noqa: E501
        :type: list[FSSMBShareACLReq]
        """

        self._fs_smb_share_acls = fs_smb_share_acls

    @property
    def name(self):
        """Gets the name of this FSSMBShareCreateReqShare.  # noqa: E501

        name of share  # noqa: E501

        :return: The name of this FSSMBShareCreateReqShare.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FSSMBShareCreateReqShare.

        name of share  # noqa: E501

        :param name: The name of this FSSMBShareCreateReqShare.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def recycled(self):
        """Gets the recycled of this FSSMBShareCreateReqShare.  # noqa: E501

        recycle status  # noqa: E501

        :return: The recycled of this FSSMBShareCreateReqShare.  # noqa: E501
        :rtype: bool
        """
        return self._recycled

    @recycled.setter
    def recycled(self, recycled):
        """Sets the recycled of this FSSMBShareCreateReqShare.

        recycle status  # noqa: E501

        :param recycled: The recycled of this FSSMBShareCreateReqShare.  # noqa: E501
        :type: bool
        """

        self._recycled = recycled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSSMBShareCreateReqShare):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

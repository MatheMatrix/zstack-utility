# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class FSNFSShareACLReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_squash': 'bool',
        'fs_client_group_id': 'int',
        'fs_client_id': 'int',
        'id': 'int',
        'permission': 'str',
        'root_squash': 'bool',
        'sync': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'all_squash': 'all_squash',
        'fs_client_group_id': 'fs_client_group_id',
        'fs_client_id': 'fs_client_id',
        'id': 'id',
        'permission': 'permission',
        'root_squash': 'root_squash',
        'sync': 'sync',
        'type': 'type'
    }

    def __init__(self, all_squash=None, fs_client_group_id=None, fs_client_id=None, id=None, permission=None, root_squash=None, sync=None, type=None):  # noqa: E501
        """FSNFSShareACLReq - a model defined in Swagger"""  # noqa: E501

        self._all_squash = None
        self._fs_client_group_id = None
        self._fs_client_id = None
        self._id = None
        self._permission = None
        self._root_squash = None
        self._sync = None
        self._type = None
        self.discriminator = None

        if all_squash is not None:
            self.all_squash = all_squash
        if fs_client_group_id is not None:
            self.fs_client_group_id = fs_client_group_id
        if fs_client_id is not None:
            self.fs_client_id = fs_client_id
        if id is not None:
            self.id = id
        if permission is not None:
            self.permission = permission
        if root_squash is not None:
            self.root_squash = root_squash
        if sync is not None:
            self.sync = sync
        if type is not None:
            self.type = type

    @property
    def all_squash(self):
        """Gets the all_squash of this FSNFSShareACLReq.  # noqa: E501

        all squash  # noqa: E501

        :return: The all_squash of this FSNFSShareACLReq.  # noqa: E501
        :rtype: bool
        """
        return self._all_squash

    @all_squash.setter
    def all_squash(self, all_squash):
        """Sets the all_squash of this FSNFSShareACLReq.

        all squash  # noqa: E501

        :param all_squash: The all_squash of this FSNFSShareACLReq.  # noqa: E501
        :type: bool
        """

        self._all_squash = all_squash

    @property
    def fs_client_group_id(self):
        """Gets the fs_client_group_id of this FSNFSShareACLReq.  # noqa: E501

        id of cilent group  # noqa: E501

        :return: The fs_client_group_id of this FSNFSShareACLReq.  # noqa: E501
        :rtype: int
        """
        return self._fs_client_group_id

    @fs_client_group_id.setter
    def fs_client_group_id(self, fs_client_group_id):
        """Sets the fs_client_group_id of this FSNFSShareACLReq.

        id of cilent group  # noqa: E501

        :param fs_client_group_id: The fs_client_group_id of this FSNFSShareACLReq.  # noqa: E501
        :type: int
        """

        self._fs_client_group_id = fs_client_group_id

    @property
    def fs_client_id(self):
        """Gets the fs_client_id of this FSNFSShareACLReq.  # noqa: E501

        id of cilent  # noqa: E501

        :return: The fs_client_id of this FSNFSShareACLReq.  # noqa: E501
        :rtype: int
        """
        return self._fs_client_id

    @fs_client_id.setter
    def fs_client_id(self, fs_client_id):
        """Sets the fs_client_id of this FSNFSShareACLReq.

        id of cilent  # noqa: E501

        :param fs_client_id: The fs_client_id of this FSNFSShareACLReq.  # noqa: E501
        :type: int
        """

        self._fs_client_id = fs_client_id

    @property
    def id(self):
        """Gets the id of this FSNFSShareACLReq.  # noqa: E501

        id of user group  # noqa: E501

        :return: The id of this FSNFSShareACLReq.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FSNFSShareACLReq.

        id of user group  # noqa: E501

        :param id: The id of this FSNFSShareACLReq.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def permission(self):
        """Gets the permission of this FSNFSShareACLReq.  # noqa: E501

        readonly or readwrite access  # noqa: E501

        :return: The permission of this FSNFSShareACLReq.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this FSNFSShareACLReq.

        readonly or readwrite access  # noqa: E501

        :param permission: The permission of this FSNFSShareACLReq.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def root_squash(self):
        """Gets the root_squash of this FSNFSShareACLReq.  # noqa: E501

        root squash  # noqa: E501

        :return: The root_squash of this FSNFSShareACLReq.  # noqa: E501
        :rtype: bool
        """
        return self._root_squash

    @root_squash.setter
    def root_squash(self, root_squash):
        """Sets the root_squash of this FSNFSShareACLReq.

        root squash  # noqa: E501

        :param root_squash: The root_squash of this FSNFSShareACLReq.  # noqa: E501
        :type: bool
        """

        self._root_squash = root_squash

    @property
    def sync(self):
        """Gets the sync of this FSNFSShareACLReq.  # noqa: E501

        write to disk by sync or async  # noqa: E501

        :return: The sync of this FSNFSShareACLReq.  # noqa: E501
        :rtype: bool
        """
        return self._sync

    @sync.setter
    def sync(self, sync):
        """Sets the sync of this FSNFSShareACLReq.

        write to disk by sync or async  # noqa: E501

        :param sync: The sync of this FSNFSShareACLReq.  # noqa: E501
        :type: bool
        """

        self._sync = sync

    @property
    def type(self):
        """Gets the type of this FSNFSShareACLReq.  # noqa: E501

        type of share acl  # noqa: E501

        :return: The type of this FSNFSShareACLReq.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FSNFSShareACLReq.

        type of share acl  # noqa: E501

        :param type: The type of this FSNFSShareACLReq.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSNFSShareACLReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

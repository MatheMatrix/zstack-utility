# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class ObjectStorageZoneCreateReqZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'master': 'bool',
        'remote_cluster_id': 'int'
    }

    attribute_map = {
        'alias': 'alias',
        'master': 'master',
        'remote_cluster_id': 'remote_cluster_id'
    }

    def __init__(self, alias=None, master=None, remote_cluster_id=None):  # noqa: E501
        """ObjectStorageZoneCreateReqZone - a model defined in Swagger"""  # noqa: E501

        self._alias = None
        self._master = None
        self._remote_cluster_id = None
        self.discriminator = None

        if alias is not None:
            self.alias = alias
        self.master = master
        self.remote_cluster_id = remote_cluster_id

    @property
    def alias(self):
        """Gets the alias of this ObjectStorageZoneCreateReqZone.  # noqa: E501

        os zone alias  # noqa: E501

        :return: The alias of this ObjectStorageZoneCreateReqZone.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ObjectStorageZoneCreateReqZone.

        os zone alias  # noqa: E501

        :param alias: The alias of this ObjectStorageZoneCreateReqZone.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def master(self):
        """Gets the master of this ObjectStorageZoneCreateReqZone.  # noqa: E501

        is a master zone  # noqa: E501

        :return: The master of this ObjectStorageZoneCreateReqZone.  # noqa: E501
        :rtype: bool
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this ObjectStorageZoneCreateReqZone.

        is a master zone  # noqa: E501

        :param master: The master of this ObjectStorageZoneCreateReqZone.  # noqa: E501
        :type: bool
        """
        if master is None:
            raise ValueError("Invalid value for `master`, must not be `None`")  # noqa: E501

        self._master = master

    @property
    def remote_cluster_id(self):
        """Gets the remote_cluster_id of this ObjectStorageZoneCreateReqZone.  # noqa: E501

        remote cluster id  # noqa: E501

        :return: The remote_cluster_id of this ObjectStorageZoneCreateReqZone.  # noqa: E501
        :rtype: int
        """
        return self._remote_cluster_id

    @remote_cluster_id.setter
    def remote_cluster_id(self, remote_cluster_id):
        """Sets the remote_cluster_id of this ObjectStorageZoneCreateReqZone.

        remote cluster id  # noqa: E501

        :param remote_cluster_id: The remote_cluster_id of this ObjectStorageZoneCreateReqZone.  # noqa: E501
        :type: int
        """
        if remote_cluster_id is None:
            raise ValueError("Invalid value for `remote_cluster_id`, must not be `None`")  # noqa: E501

        self._remote_cluster_id = remote_cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStorageZoneCreateReqZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

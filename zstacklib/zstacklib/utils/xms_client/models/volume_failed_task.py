# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class VolumeFailedTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abort': 'float',
        'busy': 'float',
        'check_cond': 'float',
        'resv_conflict': 'float'
    }

    attribute_map = {
        'abort': 'abort',
        'busy': 'busy',
        'check_cond': 'check_cond',
        'resv_conflict': 'resv_conflict'
    }

    def __init__(self, abort=None, busy=None, check_cond=None, resv_conflict=None):  # noqa: E501
        """VolumeFailedTask - a model defined in Swagger"""  # noqa: E501

        self._abort = None
        self._busy = None
        self._check_cond = None
        self._resv_conflict = None
        self.discriminator = None

        if abort is not None:
            self.abort = abort
        if busy is not None:
            self.busy = busy
        if check_cond is not None:
            self.check_cond = check_cond
        if resv_conflict is not None:
            self.resv_conflict = resv_conflict

    @property
    def abort(self):
        """Gets the abort of this VolumeFailedTask.  # noqa: E501


        :return: The abort of this VolumeFailedTask.  # noqa: E501
        :rtype: float
        """
        return self._abort

    @abort.setter
    def abort(self, abort):
        """Sets the abort of this VolumeFailedTask.


        :param abort: The abort of this VolumeFailedTask.  # noqa: E501
        :type: float
        """

        self._abort = abort

    @property
    def busy(self):
        """Gets the busy of this VolumeFailedTask.  # noqa: E501


        :return: The busy of this VolumeFailedTask.  # noqa: E501
        :rtype: float
        """
        return self._busy

    @busy.setter
    def busy(self, busy):
        """Sets the busy of this VolumeFailedTask.


        :param busy: The busy of this VolumeFailedTask.  # noqa: E501
        :type: float
        """

        self._busy = busy

    @property
    def check_cond(self):
        """Gets the check_cond of this VolumeFailedTask.  # noqa: E501


        :return: The check_cond of this VolumeFailedTask.  # noqa: E501
        :rtype: float
        """
        return self._check_cond

    @check_cond.setter
    def check_cond(self, check_cond):
        """Sets the check_cond of this VolumeFailedTask.


        :param check_cond: The check_cond of this VolumeFailedTask.  # noqa: E501
        :type: float
        """

        self._check_cond = check_cond

    @property
    def resv_conflict(self):
        """Gets the resv_conflict of this VolumeFailedTask.  # noqa: E501


        :return: The resv_conflict of this VolumeFailedTask.  # noqa: E501
        :rtype: float
        """
        return self._resv_conflict

    @resv_conflict.setter
    def resv_conflict(self, resv_conflict):
        """Sets the resv_conflict of this VolumeFailedTask.


        :param resv_conflict: The resv_conflict of this VolumeFailedTask.  # noqa: E501
        :type: float
        """

        self._resv_conflict = resv_conflict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeFailedTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

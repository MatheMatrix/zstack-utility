# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class ChangePasswordReqReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encrypted_original_password': 'str',
        'encrypted_password': 'str',
        'original_password': 'str',
        'password': 'str',
        'rsa_key_id': 'str'
    }

    attribute_map = {
        'encrypted_original_password': 'encrypted_original_password',
        'encrypted_password': 'encrypted_password',
        'original_password': 'original_password',
        'password': 'password',
        'rsa_key_id': 'rsa_key_id'
    }

    def __init__(self, encrypted_original_password=None, encrypted_password=None, original_password=None, password=None, rsa_key_id=None):  # noqa: E501
        """ChangePasswordReqReq - a model defined in Swagger"""  # noqa: E501

        self._encrypted_original_password = None
        self._encrypted_password = None
        self._original_password = None
        self._password = None
        self._rsa_key_id = None
        self.discriminator = None

        if encrypted_original_password is not None:
            self.encrypted_original_password = encrypted_original_password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        self.original_password = original_password
        self.password = password
        if rsa_key_id is not None:
            self.rsa_key_id = rsa_key_id

    @property
    def encrypted_original_password(self):
        """Gets the encrypted_original_password of this ChangePasswordReqReq.  # noqa: E501

        encrypted original password for auth  # noqa: E501

        :return: The encrypted_original_password of this ChangePasswordReqReq.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_original_password

    @encrypted_original_password.setter
    def encrypted_original_password(self, encrypted_original_password):
        """Sets the encrypted_original_password of this ChangePasswordReqReq.

        encrypted original password for auth  # noqa: E501

        :param encrypted_original_password: The encrypted_original_password of this ChangePasswordReqReq.  # noqa: E501
        :type: str
        """

        self._encrypted_original_password = encrypted_original_password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ChangePasswordReqReq.  # noqa: E501

        encrypted password for auth  # noqa: E501

        :return: The encrypted_password of this ChangePasswordReqReq.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ChangePasswordReqReq.

        encrypted password for auth  # noqa: E501

        :param encrypted_password: The encrypted_password of this ChangePasswordReqReq.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def original_password(self):
        """Gets the original_password of this ChangePasswordReqReq.  # noqa: E501

        original password of user  # noqa: E501

        :return: The original_password of this ChangePasswordReqReq.  # noqa: E501
        :rtype: str
        """
        return self._original_password

    @original_password.setter
    def original_password(self, original_password):
        """Sets the original_password of this ChangePasswordReqReq.

        original password of user  # noqa: E501

        :param original_password: The original_password of this ChangePasswordReqReq.  # noqa: E501
        :type: str
        """
        if original_password is None:
            raise ValueError("Invalid value for `original_password`, must not be `None`")  # noqa: E501

        self._original_password = original_password

    @property
    def password(self):
        """Gets the password of this ChangePasswordReqReq.  # noqa: E501

        new password of user  # noqa: E501

        :return: The password of this ChangePasswordReqReq.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ChangePasswordReqReq.

        new password of user  # noqa: E501

        :param password: The password of this ChangePasswordReqReq.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def rsa_key_id(self):
        """Gets the rsa_key_id of this ChangePasswordReqReq.  # noqa: E501

        rsa key id  # noqa: E501

        :return: The rsa_key_id of this ChangePasswordReqReq.  # noqa: E501
        :rtype: str
        """
        return self._rsa_key_id

    @rsa_key_id.setter
    def rsa_key_id(self, rsa_key_id):
        """Sets the rsa_key_id of this ChangePasswordReqReq.

        rsa key id  # noqa: E501

        :param rsa_key_id: The rsa_key_id of this ChangePasswordReqReq.  # noqa: E501
        :type: str
        """

        self._rsa_key_id = rsa_key_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangePasswordReqReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

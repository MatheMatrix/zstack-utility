# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class Condition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'max_size': 'int',
        'min_size': 'int',
        'operator': 'str',
        'size': 'int',
        'value': 'str'
    }

    attribute_map = {
        'key': 'key',
        'max_size': 'max_size',
        'min_size': 'min_size',
        'operator': 'operator',
        'size': 'size',
        'value': 'value'
    }

    def __init__(self, key=None, max_size=None, min_size=None, operator=None, size=None, value=None):  # noqa: E501
        """Condition - a model defined in Swagger"""  # noqa: E501

        self._key = None
        self._max_size = None
        self._min_size = None
        self._operator = None
        self._size = None
        self._value = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if max_size is not None:
            self.max_size = max_size
        if min_size is not None:
            self.min_size = min_size
        if operator is not None:
            self.operator = operator
        if size is not None:
            self.size = size
        if value is not None:
            self.value = value

    @property
    def key(self):
        """Gets the key of this Condition.  # noqa: E501


        :return: The key of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Condition.


        :param key: The key of this Condition.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def max_size(self):
        """Gets the max_size of this Condition.  # noqa: E501


        :return: The max_size of this Condition.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this Condition.


        :param max_size: The max_size of this Condition.  # noqa: E501
        :type: int
        """

        self._max_size = max_size

    @property
    def min_size(self):
        """Gets the min_size of this Condition.  # noqa: E501


        :return: The min_size of this Condition.  # noqa: E501
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this Condition.


        :param min_size: The min_size of this Condition.  # noqa: E501
        :type: int
        """

        self._min_size = min_size

    @property
    def operator(self):
        """Gets the operator of this Condition.  # noqa: E501


        :return: The operator of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Condition.


        :param operator: The operator of this Condition.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def size(self):
        """Gets the size of this Condition.  # noqa: E501


        :return: The size of this Condition.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Condition.


        :param size: The size of this Condition.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def value(self):
        """Gets the value of this Condition.  # noqa: E501


        :return: The value of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Condition.


        :param value: The value of this Condition.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Condition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

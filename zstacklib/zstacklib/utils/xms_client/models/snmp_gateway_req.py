# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class SnmpGatewayReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port': 'int',
        'auth_password': 'str',
        'auth_protocol': 'str',
        'context_engine_id': 'str',
        'context_name': 'str',
        'host_id': 'int',
        'priv_password': 'str',
        'priv_protocol': 'str',
        'read_community': 'str',
        'security_engine_id': 'str',
        'security_level': 'str',
        'user_name': 'str',
        'version': 'str',
        'write_community': 'str'
    }

    attribute_map = {
        'port': 'Port',
        'auth_password': 'auth_password',
        'auth_protocol': 'auth_protocol',
        'context_engine_id': 'context_engine_id',
        'context_name': 'context_name',
        'host_id': 'host_id',
        'priv_password': 'priv_password',
        'priv_protocol': 'priv_protocol',
        'read_community': 'read_community',
        'security_engine_id': 'security_engine_id',
        'security_level': 'security_level',
        'user_name': 'user_name',
        'version': 'version',
        'write_community': 'write_community'
    }

    def __init__(self, port=None, auth_password=None, auth_protocol=None, context_engine_id=None, context_name=None, host_id=None, priv_password=None, priv_protocol=None, read_community=None, security_engine_id=None, security_level=None, user_name=None, version=None, write_community=None):  # noqa: E501
        """SnmpGatewayReq - a model defined in Swagger"""  # noqa: E501

        self._port = None
        self._auth_password = None
        self._auth_protocol = None
        self._context_engine_id = None
        self._context_name = None
        self._host_id = None
        self._priv_password = None
        self._priv_protocol = None
        self._read_community = None
        self._security_engine_id = None
        self._security_level = None
        self._user_name = None
        self._version = None
        self._write_community = None
        self.discriminator = None

        if port is not None:
            self.port = port
        if auth_password is not None:
            self.auth_password = auth_password
        if auth_protocol is not None:
            self.auth_protocol = auth_protocol
        if context_engine_id is not None:
            self.context_engine_id = context_engine_id
        if context_name is not None:
            self.context_name = context_name
        if host_id is not None:
            self.host_id = host_id
        if priv_password is not None:
            self.priv_password = priv_password
        if priv_protocol is not None:
            self.priv_protocol = priv_protocol
        if read_community is not None:
            self.read_community = read_community
        if security_engine_id is not None:
            self.security_engine_id = security_engine_id
        if security_level is not None:
            self.security_level = security_level
        if user_name is not None:
            self.user_name = user_name
        if version is not None:
            self.version = version
        if write_community is not None:
            self.write_community = write_community

    @property
    def port(self):
        """Gets the port of this SnmpGatewayReq.  # noqa: E501


        :return: The port of this SnmpGatewayReq.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SnmpGatewayReq.


        :param port: The port of this SnmpGatewayReq.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def auth_password(self):
        """Gets the auth_password of this SnmpGatewayReq.  # noqa: E501


        :return: The auth_password of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this SnmpGatewayReq.


        :param auth_password: The auth_password of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._auth_password = auth_password

    @property
    def auth_protocol(self):
        """Gets the auth_protocol of this SnmpGatewayReq.  # noqa: E501


        :return: The auth_protocol of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._auth_protocol

    @auth_protocol.setter
    def auth_protocol(self, auth_protocol):
        """Sets the auth_protocol of this SnmpGatewayReq.


        :param auth_protocol: The auth_protocol of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._auth_protocol = auth_protocol

    @property
    def context_engine_id(self):
        """Gets the context_engine_id of this SnmpGatewayReq.  # noqa: E501


        :return: The context_engine_id of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._context_engine_id

    @context_engine_id.setter
    def context_engine_id(self, context_engine_id):
        """Sets the context_engine_id of this SnmpGatewayReq.


        :param context_engine_id: The context_engine_id of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._context_engine_id = context_engine_id

    @property
    def context_name(self):
        """Gets the context_name of this SnmpGatewayReq.  # noqa: E501


        :return: The context_name of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this SnmpGatewayReq.


        :param context_name: The context_name of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._context_name = context_name

    @property
    def host_id(self):
        """Gets the host_id of this SnmpGatewayReq.  # noqa: E501


        :return: The host_id of this SnmpGatewayReq.  # noqa: E501
        :rtype: int
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this SnmpGatewayReq.


        :param host_id: The host_id of this SnmpGatewayReq.  # noqa: E501
        :type: int
        """

        self._host_id = host_id

    @property
    def priv_password(self):
        """Gets the priv_password of this SnmpGatewayReq.  # noqa: E501


        :return: The priv_password of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._priv_password

    @priv_password.setter
    def priv_password(self, priv_password):
        """Sets the priv_password of this SnmpGatewayReq.


        :param priv_password: The priv_password of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._priv_password = priv_password

    @property
    def priv_protocol(self):
        """Gets the priv_protocol of this SnmpGatewayReq.  # noqa: E501


        :return: The priv_protocol of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._priv_protocol

    @priv_protocol.setter
    def priv_protocol(self, priv_protocol):
        """Sets the priv_protocol of this SnmpGatewayReq.


        :param priv_protocol: The priv_protocol of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._priv_protocol = priv_protocol

    @property
    def read_community(self):
        """Gets the read_community of this SnmpGatewayReq.  # noqa: E501


        :return: The read_community of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._read_community

    @read_community.setter
    def read_community(self, read_community):
        """Sets the read_community of this SnmpGatewayReq.


        :param read_community: The read_community of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._read_community = read_community

    @property
    def security_engine_id(self):
        """Gets the security_engine_id of this SnmpGatewayReq.  # noqa: E501


        :return: The security_engine_id of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._security_engine_id

    @security_engine_id.setter
    def security_engine_id(self, security_engine_id):
        """Sets the security_engine_id of this SnmpGatewayReq.


        :param security_engine_id: The security_engine_id of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._security_engine_id = security_engine_id

    @property
    def security_level(self):
        """Gets the security_level of this SnmpGatewayReq.  # noqa: E501


        :return: The security_level of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this SnmpGatewayReq.


        :param security_level: The security_level of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._security_level = security_level

    @property
    def user_name(self):
        """Gets the user_name of this SnmpGatewayReq.  # noqa: E501


        :return: The user_name of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SnmpGatewayReq.


        :param user_name: The user_name of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def version(self):
        """Gets the version of this SnmpGatewayReq.  # noqa: E501


        :return: The version of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SnmpGatewayReq.


        :param version: The version of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def write_community(self):
        """Gets the write_community of this SnmpGatewayReq.  # noqa: E501


        :return: The write_community of this SnmpGatewayReq.  # noqa: E501
        :rtype: str
        """
        return self._write_community

    @write_community.setter
    def write_community(self, write_community):
        """Sets the write_community of this SnmpGatewayReq.


        :param write_community: The write_community of this SnmpGatewayReq.  # noqa: E501
        :type: str
        """

        self._write_community = write_community

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpGatewayReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

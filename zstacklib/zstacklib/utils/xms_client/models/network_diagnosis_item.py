# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.host_nestview import HostNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.network_diagnosis_nestview import NetworkDiagnosisNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.network_diagnosis_stat import NetworkDiagnosisStat  # noqa: F401,E501


class NetworkDiagnosisItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'dst_host': 'HostNestview',
        'dst_interface': 'str',
        'dst_ip': 'str',
        'dst_megabits': 'int',
        'dst_type': 'str',
        'execute': 'datetime',
        'finish': 'datetime',
        'id': 'int',
        'message': 'str',
        'network_diagnosis': 'NetworkDiagnosisNestview',
        'networks': 'list[str]',
        'src_host': 'HostNestview',
        'src_interface': 'str',
        'src_ip': 'str',
        'src_megabits': 'int',
        'src_type': 'str',
        'stat': 'NetworkDiagnosisStat',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'create': 'create',
        'dst_host': 'dst_host',
        'dst_interface': 'dst_interface',
        'dst_ip': 'dst_ip',
        'dst_megabits': 'dst_megabits',
        'dst_type': 'dst_type',
        'execute': 'execute',
        'finish': 'finish',
        'id': 'id',
        'message': 'message',
        'network_diagnosis': 'network_diagnosis',
        'networks': 'networks',
        'src_host': 'src_host',
        'src_interface': 'src_interface',
        'src_ip': 'src_ip',
        'src_megabits': 'src_megabits',
        'src_type': 'src_type',
        'stat': 'stat',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, create=None, dst_host=None, dst_interface=None, dst_ip=None, dst_megabits=None, dst_type=None, execute=None, finish=None, id=None, message=None, network_diagnosis=None, networks=None, src_host=None, src_interface=None, src_ip=None, src_megabits=None, src_type=None, stat=None, status=None, update=None):  # noqa: E501
        """NetworkDiagnosisItem - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._dst_host = None
        self._dst_interface = None
        self._dst_ip = None
        self._dst_megabits = None
        self._dst_type = None
        self._execute = None
        self._finish = None
        self._id = None
        self._message = None
        self._network_diagnosis = None
        self._networks = None
        self._src_host = None
        self._src_interface = None
        self._src_ip = None
        self._src_megabits = None
        self._src_type = None
        self._stat = None
        self._status = None
        self._update = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if dst_host is not None:
            self.dst_host = dst_host
        if dst_interface is not None:
            self.dst_interface = dst_interface
        if dst_ip is not None:
            self.dst_ip = dst_ip
        if dst_megabits is not None:
            self.dst_megabits = dst_megabits
        if dst_type is not None:
            self.dst_type = dst_type
        if execute is not None:
            self.execute = execute
        if finish is not None:
            self.finish = finish
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if network_diagnosis is not None:
            self.network_diagnosis = network_diagnosis
        if networks is not None:
            self.networks = networks
        if src_host is not None:
            self.src_host = src_host
        if src_interface is not None:
            self.src_interface = src_interface
        if src_ip is not None:
            self.src_ip = src_ip
        if src_megabits is not None:
            self.src_megabits = src_megabits
        if src_type is not None:
            self.src_type = src_type
        if stat is not None:
            self.stat = stat
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def create(self):
        """Gets the create of this NetworkDiagnosisItem.  # noqa: E501


        :return: The create of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this NetworkDiagnosisItem.


        :param create: The create of this NetworkDiagnosisItem.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def dst_host(self):
        """Gets the dst_host of this NetworkDiagnosisItem.  # noqa: E501


        :return: The dst_host of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: HostNestview
        """
        return self._dst_host

    @dst_host.setter
    def dst_host(self, dst_host):
        """Sets the dst_host of this NetworkDiagnosisItem.


        :param dst_host: The dst_host of this NetworkDiagnosisItem.  # noqa: E501
        :type: HostNestview
        """

        self._dst_host = dst_host

    @property
    def dst_interface(self):
        """Gets the dst_interface of this NetworkDiagnosisItem.  # noqa: E501


        :return: The dst_interface of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: str
        """
        return self._dst_interface

    @dst_interface.setter
    def dst_interface(self, dst_interface):
        """Sets the dst_interface of this NetworkDiagnosisItem.


        :param dst_interface: The dst_interface of this NetworkDiagnosisItem.  # noqa: E501
        :type: str
        """

        self._dst_interface = dst_interface

    @property
    def dst_ip(self):
        """Gets the dst_ip of this NetworkDiagnosisItem.  # noqa: E501


        :return: The dst_ip of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this NetworkDiagnosisItem.


        :param dst_ip: The dst_ip of this NetworkDiagnosisItem.  # noqa: E501
        :type: str
        """

        self._dst_ip = dst_ip

    @property
    def dst_megabits(self):
        """Gets the dst_megabits of this NetworkDiagnosisItem.  # noqa: E501


        :return: The dst_megabits of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: int
        """
        return self._dst_megabits

    @dst_megabits.setter
    def dst_megabits(self, dst_megabits):
        """Sets the dst_megabits of this NetworkDiagnosisItem.


        :param dst_megabits: The dst_megabits of this NetworkDiagnosisItem.  # noqa: E501
        :type: int
        """

        self._dst_megabits = dst_megabits

    @property
    def dst_type(self):
        """Gets the dst_type of this NetworkDiagnosisItem.  # noqa: E501


        :return: The dst_type of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: str
        """
        return self._dst_type

    @dst_type.setter
    def dst_type(self, dst_type):
        """Sets the dst_type of this NetworkDiagnosisItem.


        :param dst_type: The dst_type of this NetworkDiagnosisItem.  # noqa: E501
        :type: str
        """

        self._dst_type = dst_type

    @property
    def execute(self):
        """Gets the execute of this NetworkDiagnosisItem.  # noqa: E501


        :return: The execute of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: datetime
        """
        return self._execute

    @execute.setter
    def execute(self, execute):
        """Sets the execute of this NetworkDiagnosisItem.


        :param execute: The execute of this NetworkDiagnosisItem.  # noqa: E501
        :type: datetime
        """

        self._execute = execute

    @property
    def finish(self):
        """Gets the finish of this NetworkDiagnosisItem.  # noqa: E501


        :return: The finish of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: datetime
        """
        return self._finish

    @finish.setter
    def finish(self, finish):
        """Sets the finish of this NetworkDiagnosisItem.


        :param finish: The finish of this NetworkDiagnosisItem.  # noqa: E501
        :type: datetime
        """

        self._finish = finish

    @property
    def id(self):
        """Gets the id of this NetworkDiagnosisItem.  # noqa: E501


        :return: The id of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkDiagnosisItem.


        :param id: The id of this NetworkDiagnosisItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this NetworkDiagnosisItem.  # noqa: E501


        :return: The message of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NetworkDiagnosisItem.


        :param message: The message of this NetworkDiagnosisItem.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def network_diagnosis(self):
        """Gets the network_diagnosis of this NetworkDiagnosisItem.  # noqa: E501


        :return: The network_diagnosis of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: NetworkDiagnosisNestview
        """
        return self._network_diagnosis

    @network_diagnosis.setter
    def network_diagnosis(self, network_diagnosis):
        """Sets the network_diagnosis of this NetworkDiagnosisItem.


        :param network_diagnosis: The network_diagnosis of this NetworkDiagnosisItem.  # noqa: E501
        :type: NetworkDiagnosisNestview
        """

        self._network_diagnosis = network_diagnosis

    @property
    def networks(self):
        """Gets the networks of this NetworkDiagnosisItem.  # noqa: E501


        :return: The networks of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this NetworkDiagnosisItem.


        :param networks: The networks of this NetworkDiagnosisItem.  # noqa: E501
        :type: list[str]
        """

        self._networks = networks

    @property
    def src_host(self):
        """Gets the src_host of this NetworkDiagnosisItem.  # noqa: E501


        :return: The src_host of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: HostNestview
        """
        return self._src_host

    @src_host.setter
    def src_host(self, src_host):
        """Sets the src_host of this NetworkDiagnosisItem.


        :param src_host: The src_host of this NetworkDiagnosisItem.  # noqa: E501
        :type: HostNestview
        """

        self._src_host = src_host

    @property
    def src_interface(self):
        """Gets the src_interface of this NetworkDiagnosisItem.  # noqa: E501


        :return: The src_interface of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: str
        """
        return self._src_interface

    @src_interface.setter
    def src_interface(self, src_interface):
        """Sets the src_interface of this NetworkDiagnosisItem.


        :param src_interface: The src_interface of this NetworkDiagnosisItem.  # noqa: E501
        :type: str
        """

        self._src_interface = src_interface

    @property
    def src_ip(self):
        """Gets the src_ip of this NetworkDiagnosisItem.  # noqa: E501


        :return: The src_ip of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this NetworkDiagnosisItem.


        :param src_ip: The src_ip of this NetworkDiagnosisItem.  # noqa: E501
        :type: str
        """

        self._src_ip = src_ip

    @property
    def src_megabits(self):
        """Gets the src_megabits of this NetworkDiagnosisItem.  # noqa: E501


        :return: The src_megabits of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: int
        """
        return self._src_megabits

    @src_megabits.setter
    def src_megabits(self, src_megabits):
        """Sets the src_megabits of this NetworkDiagnosisItem.


        :param src_megabits: The src_megabits of this NetworkDiagnosisItem.  # noqa: E501
        :type: int
        """

        self._src_megabits = src_megabits

    @property
    def src_type(self):
        """Gets the src_type of this NetworkDiagnosisItem.  # noqa: E501


        :return: The src_type of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: str
        """
        return self._src_type

    @src_type.setter
    def src_type(self, src_type):
        """Sets the src_type of this NetworkDiagnosisItem.


        :param src_type: The src_type of this NetworkDiagnosisItem.  # noqa: E501
        :type: str
        """

        self._src_type = src_type

    @property
    def stat(self):
        """Gets the stat of this NetworkDiagnosisItem.  # noqa: E501


        :return: The stat of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: NetworkDiagnosisStat
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this NetworkDiagnosisItem.


        :param stat: The stat of this NetworkDiagnosisItem.  # noqa: E501
        :type: NetworkDiagnosisStat
        """

        self._stat = stat

    @property
    def status(self):
        """Gets the status of this NetworkDiagnosisItem.  # noqa: E501


        :return: The status of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NetworkDiagnosisItem.


        :param status: The status of this NetworkDiagnosisItem.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this NetworkDiagnosisItem.  # noqa: E501


        :return: The update of this NetworkDiagnosisItem.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this NetworkDiagnosisItem.


        :param update: The update of this NetworkDiagnosisItem.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkDiagnosisItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.fssmb_share_nestview import FSSMBShareNestview  # noqa: F401,E501


class FSSMBSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_ip': 'str',
        'client_port': 'int',
        'connected_at': 'datetime',
        'create': 'datetime',
        'fs_smb_share': 'FSSMBShareNestview',
        'group': 'str',
        'id': 'int',
        'protocol_version': 'str',
        'update': 'datetime',
        'username': 'str'
    }

    attribute_map = {
        'client_ip': 'client_ip',
        'client_port': 'client_port',
        'connected_at': 'connected_at',
        'create': 'create',
        'fs_smb_share': 'fs_smb_share',
        'group': 'group',
        'id': 'id',
        'protocol_version': 'protocol_version',
        'update': 'update',
        'username': 'username'
    }

    def __init__(self, client_ip=None, client_port=None, connected_at=None, create=None, fs_smb_share=None, group=None, id=None, protocol_version=None, update=None, username=None):  # noqa: E501
        """FSSMBSession - a model defined in Swagger"""  # noqa: E501

        self._client_ip = None
        self._client_port = None
        self._connected_at = None
        self._create = None
        self._fs_smb_share = None
        self._group = None
        self._id = None
        self._protocol_version = None
        self._update = None
        self._username = None
        self.discriminator = None

        if client_ip is not None:
            self.client_ip = client_ip
        if client_port is not None:
            self.client_port = client_port
        if connected_at is not None:
            self.connected_at = connected_at
        if create is not None:
            self.create = create
        if fs_smb_share is not None:
            self.fs_smb_share = fs_smb_share
        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if protocol_version is not None:
            self.protocol_version = protocol_version
        if update is not None:
            self.update = update
        if username is not None:
            self.username = username

    @property
    def client_ip(self):
        """Gets the client_ip of this FSSMBSession.  # noqa: E501


        :return: The client_ip of this FSSMBSession.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this FSSMBSession.


        :param client_ip: The client_ip of this FSSMBSession.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def client_port(self):
        """Gets the client_port of this FSSMBSession.  # noqa: E501


        :return: The client_port of this FSSMBSession.  # noqa: E501
        :rtype: int
        """
        return self._client_port

    @client_port.setter
    def client_port(self, client_port):
        """Sets the client_port of this FSSMBSession.


        :param client_port: The client_port of this FSSMBSession.  # noqa: E501
        :type: int
        """

        self._client_port = client_port

    @property
    def connected_at(self):
        """Gets the connected_at of this FSSMBSession.  # noqa: E501


        :return: The connected_at of this FSSMBSession.  # noqa: E501
        :rtype: datetime
        """
        return self._connected_at

    @connected_at.setter
    def connected_at(self, connected_at):
        """Sets the connected_at of this FSSMBSession.


        :param connected_at: The connected_at of this FSSMBSession.  # noqa: E501
        :type: datetime
        """

        self._connected_at = connected_at

    @property
    def create(self):
        """Gets the create of this FSSMBSession.  # noqa: E501


        :return: The create of this FSSMBSession.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this FSSMBSession.


        :param create: The create of this FSSMBSession.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def fs_smb_share(self):
        """Gets the fs_smb_share of this FSSMBSession.  # noqa: E501


        :return: The fs_smb_share of this FSSMBSession.  # noqa: E501
        :rtype: FSSMBShareNestview
        """
        return self._fs_smb_share

    @fs_smb_share.setter
    def fs_smb_share(self, fs_smb_share):
        """Sets the fs_smb_share of this FSSMBSession.


        :param fs_smb_share: The fs_smb_share of this FSSMBSession.  # noqa: E501
        :type: FSSMBShareNestview
        """

        self._fs_smb_share = fs_smb_share

    @property
    def group(self):
        """Gets the group of this FSSMBSession.  # noqa: E501


        :return: The group of this FSSMBSession.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FSSMBSession.


        :param group: The group of this FSSMBSession.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this FSSMBSession.  # noqa: E501


        :return: The id of this FSSMBSession.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FSSMBSession.


        :param id: The id of this FSSMBSession.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def protocol_version(self):
        """Gets the protocol_version of this FSSMBSession.  # noqa: E501


        :return: The protocol_version of this FSSMBSession.  # noqa: E501
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this FSSMBSession.


        :param protocol_version: The protocol_version of this FSSMBSession.  # noqa: E501
        :type: str
        """

        self._protocol_version = protocol_version

    @property
    def update(self):
        """Gets the update of this FSSMBSession.  # noqa: E501


        :return: The update of this FSSMBSession.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this FSSMBSession.


        :param update: The update of this FSSMBSession.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def username(self):
        """Gets the username of this FSSMBSession.  # noqa: E501


        :return: The username of this FSSMBSession.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this FSSMBSession.


        :param username: The username of this FSSMBSession.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSSMBSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OSExternalStoragePlatformType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'id': 'int',
        'platform': 'str',
        'platform_type': 'str',
        'region': 'str',
        'region_zh': 'str'
    }

    attribute_map = {
        'create': 'create',
        'id': 'id',
        'platform': 'platform',
        'platform_type': 'platform_type',
        'region': 'region',
        'region_zh': 'region_zh'
    }

    def __init__(self, create=None, id=None, platform=None, platform_type=None, region=None, region_zh=None):  # noqa: E501
        """OSExternalStoragePlatformType - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._id = None
        self._platform = None
        self._platform_type = None
        self._region = None
        self._region_zh = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if platform is not None:
            self.platform = platform
        if platform_type is not None:
            self.platform_type = platform_type
        if region is not None:
            self.region = region
        if region_zh is not None:
            self.region_zh = region_zh

    @property
    def create(self):
        """Gets the create of this OSExternalStoragePlatformType.  # noqa: E501


        :return: The create of this OSExternalStoragePlatformType.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSExternalStoragePlatformType.


        :param create: The create of this OSExternalStoragePlatformType.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this OSExternalStoragePlatformType.  # noqa: E501


        :return: The id of this OSExternalStoragePlatformType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSExternalStoragePlatformType.


        :param id: The id of this OSExternalStoragePlatformType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def platform(self):
        """Gets the platform of this OSExternalStoragePlatformType.  # noqa: E501


        :return: The platform of this OSExternalStoragePlatformType.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this OSExternalStoragePlatformType.


        :param platform: The platform of this OSExternalStoragePlatformType.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def platform_type(self):
        """Gets the platform_type of this OSExternalStoragePlatformType.  # noqa: E501


        :return: The platform_type of this OSExternalStoragePlatformType.  # noqa: E501
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this OSExternalStoragePlatformType.


        :param platform_type: The platform_type of this OSExternalStoragePlatformType.  # noqa: E501
        :type: str
        """

        self._platform_type = platform_type

    @property
    def region(self):
        """Gets the region of this OSExternalStoragePlatformType.  # noqa: E501


        :return: The region of this OSExternalStoragePlatformType.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this OSExternalStoragePlatformType.


        :param region: The region of this OSExternalStoragePlatformType.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def region_zh(self):
        """Gets the region_zh of this OSExternalStoragePlatformType.  # noqa: E501


        :return: The region_zh of this OSExternalStoragePlatformType.  # noqa: E501
        :rtype: str
        """
        return self._region_zh

    @region_zh.setter
    def region_zh(self, region_zh):
        """Sets the region_zh of this OSExternalStoragePlatformType.


        :param region_zh: The region_zh of this OSExternalStoragePlatformType.  # noqa: E501
        :type: str
        """

        self._region_zh = region_zh

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSExternalStoragePlatformType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OriginInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'str',
        'authentication': 'str',
        'bucket': 'str',
        'directory': 'str',
        'endpoint': 'str',
        'host_style': 'str',
        'path': 'str',
        'platform': 'str',
        'platform_type': 'str',
        'prefix': 'str',
        'region': 'str',
        'secret_key': 'str',
        'type': 'str'
    }

    attribute_map = {
        'access_key': 'access_key',
        'authentication': 'authentication',
        'bucket': 'bucket',
        'directory': 'directory',
        'endpoint': 'endpoint',
        'host_style': 'host_style',
        'path': 'path',
        'platform': 'platform',
        'platform_type': 'platform_type',
        'prefix': 'prefix',
        'region': 'region',
        'secret_key': 'secret_key',
        'type': 'type'
    }

    def __init__(self, access_key=None, authentication=None, bucket=None, directory=None, endpoint=None, host_style=None, path=None, platform=None, platform_type=None, prefix=None, region=None, secret_key=None, type=None):  # noqa: E501
        """OriginInfo - a model defined in Swagger"""  # noqa: E501

        self._access_key = None
        self._authentication = None
        self._bucket = None
        self._directory = None
        self._endpoint = None
        self._host_style = None
        self._path = None
        self._platform = None
        self._platform_type = None
        self._prefix = None
        self._region = None
        self._secret_key = None
        self._type = None
        self.discriminator = None

        if access_key is not None:
            self.access_key = access_key
        if authentication is not None:
            self.authentication = authentication
        if bucket is not None:
            self.bucket = bucket
        if directory is not None:
            self.directory = directory
        if endpoint is not None:
            self.endpoint = endpoint
        if host_style is not None:
            self.host_style = host_style
        if path is not None:
            self.path = path
        if platform is not None:
            self.platform = platform
        if platform_type is not None:
            self.platform_type = platform_type
        if prefix is not None:
            self.prefix = prefix
        if region is not None:
            self.region = region
        if secret_key is not None:
            self.secret_key = secret_key
        if type is not None:
            self.type = type

    @property
    def access_key(self):
        """Gets the access_key of this OriginInfo.  # noqa: E501


        :return: The access_key of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this OriginInfo.


        :param access_key: The access_key of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def authentication(self):
        """Gets the authentication of this OriginInfo.  # noqa: E501


        :return: The authentication of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this OriginInfo.


        :param authentication: The authentication of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._authentication = authentication

    @property
    def bucket(self):
        """Gets the bucket of this OriginInfo.  # noqa: E501


        :return: The bucket of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this OriginInfo.


        :param bucket: The bucket of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def directory(self):
        """Gets the directory of this OriginInfo.  # noqa: E501


        :return: The directory of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this OriginInfo.


        :param directory: The directory of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def endpoint(self):
        """Gets the endpoint of this OriginInfo.  # noqa: E501


        :return: The endpoint of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this OriginInfo.


        :param endpoint: The endpoint of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def host_style(self):
        """Gets the host_style of this OriginInfo.  # noqa: E501


        :return: The host_style of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_style

    @host_style.setter
    def host_style(self, host_style):
        """Sets the host_style of this OriginInfo.


        :param host_style: The host_style of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._host_style = host_style

    @property
    def path(self):
        """Gets the path of this OriginInfo.  # noqa: E501


        :return: The path of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this OriginInfo.


        :param path: The path of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def platform(self):
        """Gets the platform of this OriginInfo.  # noqa: E501


        :return: The platform of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this OriginInfo.


        :param platform: The platform of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def platform_type(self):
        """Gets the platform_type of this OriginInfo.  # noqa: E501


        :return: The platform_type of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this OriginInfo.


        :param platform_type: The platform_type of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._platform_type = platform_type

    @property
    def prefix(self):
        """Gets the prefix of this OriginInfo.  # noqa: E501


        :return: The prefix of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this OriginInfo.


        :param prefix: The prefix of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def region(self):
        """Gets the region of this OriginInfo.  # noqa: E501


        :return: The region of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this OriginInfo.


        :param region: The region of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def secret_key(self):
        """Gets the secret_key of this OriginInfo.  # noqa: E501


        :return: The secret_key of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this OriginInfo.


        :param secret_key: The secret_key of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def type(self):
        """Gets the type of this OriginInfo.  # noqa: E501


        :return: The type of this OriginInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OriginInfo.


        :param type: The type of this OriginInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OriginInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class VolumeNonIOTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ats': 'float',
        'other': 'float',
        'unmap': 'float',
        'write_same': 'float',
        'xcopy': 'float'
    }

    attribute_map = {
        'ats': 'ats',
        'other': 'other',
        'unmap': 'unmap',
        'write_same': 'write_same',
        'xcopy': 'xcopy'
    }

    def __init__(self, ats=None, other=None, unmap=None, write_same=None, xcopy=None):  # noqa: E501
        """VolumeNonIOTask - a model defined in Swagger"""  # noqa: E501

        self._ats = None
        self._other = None
        self._unmap = None
        self._write_same = None
        self._xcopy = None
        self.discriminator = None

        if ats is not None:
            self.ats = ats
        if other is not None:
            self.other = other
        if unmap is not None:
            self.unmap = unmap
        if write_same is not None:
            self.write_same = write_same
        if xcopy is not None:
            self.xcopy = xcopy

    @property
    def ats(self):
        """Gets the ats of this VolumeNonIOTask.  # noqa: E501


        :return: The ats of this VolumeNonIOTask.  # noqa: E501
        :rtype: float
        """
        return self._ats

    @ats.setter
    def ats(self, ats):
        """Sets the ats of this VolumeNonIOTask.


        :param ats: The ats of this VolumeNonIOTask.  # noqa: E501
        :type: float
        """

        self._ats = ats

    @property
    def other(self):
        """Gets the other of this VolumeNonIOTask.  # noqa: E501


        :return: The other of this VolumeNonIOTask.  # noqa: E501
        :rtype: float
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this VolumeNonIOTask.


        :param other: The other of this VolumeNonIOTask.  # noqa: E501
        :type: float
        """

        self._other = other

    @property
    def unmap(self):
        """Gets the unmap of this VolumeNonIOTask.  # noqa: E501


        :return: The unmap of this VolumeNonIOTask.  # noqa: E501
        :rtype: float
        """
        return self._unmap

    @unmap.setter
    def unmap(self, unmap):
        """Sets the unmap of this VolumeNonIOTask.


        :param unmap: The unmap of this VolumeNonIOTask.  # noqa: E501
        :type: float
        """

        self._unmap = unmap

    @property
    def write_same(self):
        """Gets the write_same of this VolumeNonIOTask.  # noqa: E501


        :return: The write_same of this VolumeNonIOTask.  # noqa: E501
        :rtype: float
        """
        return self._write_same

    @write_same.setter
    def write_same(self, write_same):
        """Sets the write_same of this VolumeNonIOTask.


        :param write_same: The write_same of this VolumeNonIOTask.  # noqa: E501
        :type: float
        """

        self._write_same = write_same

    @property
    def xcopy(self):
        """Gets the xcopy of this VolumeNonIOTask.  # noqa: E501


        :return: The xcopy of this VolumeNonIOTask.  # noqa: E501
        :rtype: float
        """
        return self._xcopy

    @xcopy.setter
    def xcopy(self, xcopy):
        """Sets the xcopy of this VolumeNonIOTask.


        :param xcopy: The xcopy of this VolumeNonIOTask.  # noqa: E501
        :type: float
        """

        self._xcopy = xcopy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeNonIOTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

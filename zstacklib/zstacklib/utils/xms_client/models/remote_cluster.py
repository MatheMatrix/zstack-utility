# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class RemoteCluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'block_replication_num': 'int',
        'connected': 'bool',
        'create': 'datetime',
        'fs_id': 'str',
        'id': 'int',
        'name': 'str',
        'os_zone_num': 'int',
        'snapshot_replication_num': 'int',
        'status': 'str',
        'update': 'datetime',
        'url': 'str',
        'version': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'block_replication_num': 'block_replication_num',
        'connected': 'connected',
        'create': 'create',
        'fs_id': 'fs_id',
        'id': 'id',
        'name': 'name',
        'os_zone_num': 'os_zone_num',
        'snapshot_replication_num': 'snapshot_replication_num',
        'status': 'status',
        'update': 'update',
        'url': 'url',
        'version': 'version'
    }

    def __init__(self, access_token=None, block_replication_num=None, connected=None, create=None, fs_id=None, id=None, name=None, os_zone_num=None, snapshot_replication_num=None, status=None, update=None, url=None, version=None):  # noqa: E501
        """RemoteCluster - a model defined in Swagger"""  # noqa: E501

        self._access_token = None
        self._block_replication_num = None
        self._connected = None
        self._create = None
        self._fs_id = None
        self._id = None
        self._name = None
        self._os_zone_num = None
        self._snapshot_replication_num = None
        self._status = None
        self._update = None
        self._url = None
        self._version = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if block_replication_num is not None:
            self.block_replication_num = block_replication_num
        if connected is not None:
            self.connected = connected
        if create is not None:
            self.create = create
        if fs_id is not None:
            self.fs_id = fs_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if os_zone_num is not None:
            self.os_zone_num = os_zone_num
        if snapshot_replication_num is not None:
            self.snapshot_replication_num = snapshot_replication_num
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if url is not None:
            self.url = url
        if version is not None:
            self.version = version

    @property
    def access_token(self):
        """Gets the access_token of this RemoteCluster.  # noqa: E501


        :return: The access_token of this RemoteCluster.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this RemoteCluster.


        :param access_token: The access_token of this RemoteCluster.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def block_replication_num(self):
        """Gets the block_replication_num of this RemoteCluster.  # noqa: E501


        :return: The block_replication_num of this RemoteCluster.  # noqa: E501
        :rtype: int
        """
        return self._block_replication_num

    @block_replication_num.setter
    def block_replication_num(self, block_replication_num):
        """Sets the block_replication_num of this RemoteCluster.


        :param block_replication_num: The block_replication_num of this RemoteCluster.  # noqa: E501
        :type: int
        """

        self._block_replication_num = block_replication_num

    @property
    def connected(self):
        """Gets the connected of this RemoteCluster.  # noqa: E501


        :return: The connected of this RemoteCluster.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this RemoteCluster.


        :param connected: The connected of this RemoteCluster.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def create(self):
        """Gets the create of this RemoteCluster.  # noqa: E501


        :return: The create of this RemoteCluster.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this RemoteCluster.


        :param create: The create of this RemoteCluster.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def fs_id(self):
        """Gets the fs_id of this RemoteCluster.  # noqa: E501


        :return: The fs_id of this RemoteCluster.  # noqa: E501
        :rtype: str
        """
        return self._fs_id

    @fs_id.setter
    def fs_id(self, fs_id):
        """Sets the fs_id of this RemoteCluster.


        :param fs_id: The fs_id of this RemoteCluster.  # noqa: E501
        :type: str
        """

        self._fs_id = fs_id

    @property
    def id(self):
        """Gets the id of this RemoteCluster.  # noqa: E501


        :return: The id of this RemoteCluster.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteCluster.


        :param id: The id of this RemoteCluster.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RemoteCluster.  # noqa: E501


        :return: The name of this RemoteCluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteCluster.


        :param name: The name of this RemoteCluster.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os_zone_num(self):
        """Gets the os_zone_num of this RemoteCluster.  # noqa: E501


        :return: The os_zone_num of this RemoteCluster.  # noqa: E501
        :rtype: int
        """
        return self._os_zone_num

    @os_zone_num.setter
    def os_zone_num(self, os_zone_num):
        """Sets the os_zone_num of this RemoteCluster.


        :param os_zone_num: The os_zone_num of this RemoteCluster.  # noqa: E501
        :type: int
        """

        self._os_zone_num = os_zone_num

    @property
    def snapshot_replication_num(self):
        """Gets the snapshot_replication_num of this RemoteCluster.  # noqa: E501


        :return: The snapshot_replication_num of this RemoteCluster.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_replication_num

    @snapshot_replication_num.setter
    def snapshot_replication_num(self, snapshot_replication_num):
        """Sets the snapshot_replication_num of this RemoteCluster.


        :param snapshot_replication_num: The snapshot_replication_num of this RemoteCluster.  # noqa: E501
        :type: int
        """

        self._snapshot_replication_num = snapshot_replication_num

    @property
    def status(self):
        """Gets the status of this RemoteCluster.  # noqa: E501


        :return: The status of this RemoteCluster.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RemoteCluster.


        :param status: The status of this RemoteCluster.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this RemoteCluster.  # noqa: E501


        :return: The update of this RemoteCluster.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this RemoteCluster.


        :param update: The update of this RemoteCluster.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def url(self):
        """Gets the url of this RemoteCluster.  # noqa: E501


        :return: The url of this RemoteCluster.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RemoteCluster.


        :param url: The url of this RemoteCluster.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this RemoteCluster.  # noqa: E501


        :return: The version of this RemoteCluster.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RemoteCluster.


        :param version: The version of this RemoteCluster.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

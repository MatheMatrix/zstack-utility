# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DpBlockAsyncReplicationPairUpdateReqPair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected': 'bool',
        'master_policy_cron': 'str',
        'master_pool_name': 'str',
        'master_volume_name': 'str'
    }

    attribute_map = {
        'connected': 'connected',
        'master_policy_cron': 'master_policy_cron',
        'master_pool_name': 'master_pool_name',
        'master_volume_name': 'master_volume_name'
    }

    def __init__(self, connected=None, master_policy_cron=None, master_pool_name=None, master_volume_name=None):  # noqa: E501
        """DpBlockAsyncReplicationPairUpdateReqPair - a model defined in Swagger"""  # noqa: E501

        self._connected = None
        self._master_policy_cron = None
        self._master_pool_name = None
        self._master_volume_name = None
        self.discriminator = None

        if connected is not None:
            self.connected = connected
        if master_policy_cron is not None:
            self.master_policy_cron = master_policy_cron
        if master_pool_name is not None:
            self.master_pool_name = master_pool_name
        if master_volume_name is not None:
            self.master_volume_name = master_volume_name

    @property
    def connected(self):
        """Gets the connected of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501

        connection  # noqa: E501

        :return: The connected of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this DpBlockAsyncReplicationPairUpdateReqPair.

        connection  # noqa: E501

        :param connected: The connected of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def master_policy_cron(self):
        """Gets the master_policy_cron of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501

        master policy cron  # noqa: E501

        :return: The master_policy_cron of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501
        :rtype: str
        """
        return self._master_policy_cron

    @master_policy_cron.setter
    def master_policy_cron(self, master_policy_cron):
        """Sets the master_policy_cron of this DpBlockAsyncReplicationPairUpdateReqPair.

        master policy cron  # noqa: E501

        :param master_policy_cron: The master_policy_cron of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501
        :type: str
        """

        self._master_policy_cron = master_policy_cron

    @property
    def master_pool_name(self):
        """Gets the master_pool_name of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501

        master pool name  # noqa: E501

        :return: The master_pool_name of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501
        :rtype: str
        """
        return self._master_pool_name

    @master_pool_name.setter
    def master_pool_name(self, master_pool_name):
        """Sets the master_pool_name of this DpBlockAsyncReplicationPairUpdateReqPair.

        master pool name  # noqa: E501

        :param master_pool_name: The master_pool_name of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501
        :type: str
        """

        self._master_pool_name = master_pool_name

    @property
    def master_volume_name(self):
        """Gets the master_volume_name of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501

        master volume name  # noqa: E501

        :return: The master_volume_name of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501
        :rtype: str
        """
        return self._master_volume_name

    @master_volume_name.setter
    def master_volume_name(self, master_volume_name):
        """Sets the master_volume_name of this DpBlockAsyncReplicationPairUpdateReqPair.

        master volume name  # noqa: E501

        :param master_volume_name: The master_volume_name of this DpBlockAsyncReplicationPairUpdateReqPair.  # noqa: E501
        :type: str
        """

        self._master_volume_name = master_volume_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpBlockAsyncReplicationPairUpdateReqPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

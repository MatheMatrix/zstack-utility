# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class Enclosure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'list[int]',
        'order': 'str',
        'position': 'str',
        'slot_num': 'int',
        'start_slot': 'int'
    }

    attribute_map = {
        'ids': 'ids',
        'order': 'order',
        'position': 'position',
        'slot_num': 'slot_num',
        'start_slot': 'start_slot'
    }

    def __init__(self, ids=None, order=None, position=None, slot_num=None, start_slot=None):  # noqa: E501
        """Enclosure - a model defined in Swagger"""  # noqa: E501

        self._ids = None
        self._order = None
        self._position = None
        self._slot_num = None
        self._start_slot = None
        self.discriminator = None

        if ids is not None:
            self.ids = ids
        if order is not None:
            self.order = order
        if position is not None:
            self.position = position
        if slot_num is not None:
            self.slot_num = slot_num
        if start_slot is not None:
            self.start_slot = start_slot

    @property
    def ids(self):
        """Gets the ids of this Enclosure.  # noqa: E501


        :return: The ids of this Enclosure.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Enclosure.


        :param ids: The ids of this Enclosure.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def order(self):
        """Gets the order of this Enclosure.  # noqa: E501


        :return: The order of this Enclosure.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Enclosure.


        :param order: The order of this Enclosure.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def position(self):
        """Gets the position of this Enclosure.  # noqa: E501


        :return: The position of this Enclosure.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Enclosure.


        :param position: The position of this Enclosure.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def slot_num(self):
        """Gets the slot_num of this Enclosure.  # noqa: E501


        :return: The slot_num of this Enclosure.  # noqa: E501
        :rtype: int
        """
        return self._slot_num

    @slot_num.setter
    def slot_num(self, slot_num):
        """Sets the slot_num of this Enclosure.


        :param slot_num: The slot_num of this Enclosure.  # noqa: E501
        :type: int
        """

        self._slot_num = slot_num

    @property
    def start_slot(self):
        """Gets the start_slot of this Enclosure.  # noqa: E501


        :return: The start_slot of this Enclosure.  # noqa: E501
        :rtype: int
        """
        return self._start_slot

    @start_slot.setter
    def start_slot(self, start_slot):
        """Sets the start_slot of this Enclosure.


        :param start_slot: The start_slot of this Enclosure.  # noqa: E501
        :type: int
        """

        self._start_slot = start_slot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Enclosure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

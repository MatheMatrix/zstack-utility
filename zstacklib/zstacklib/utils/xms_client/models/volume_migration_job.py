# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.host_nestview import HostNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.pool_nestview import PoolNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.task import Task  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.volume_nestview import VolumeNestview  # noqa: F401,E501


class VolumeMigrationJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'dest_pool': 'PoolNestview',
        'finished_at': 'datetime',
        'host': 'HostNestview',
        'id': 'int',
        'remaining_time': 'int',
        'source_pool': 'PoolNestview',
        'started_at': 'datetime',
        'status': 'str',
        'stripes': 'int',
        'task': 'Task',
        'update': 'datetime',
        'volume': 'VolumeNestview'
    }

    attribute_map = {
        'create': 'create',
        'dest_pool': 'dest_pool',
        'finished_at': 'finished_at',
        'host': 'host',
        'id': 'id',
        'remaining_time': 'remaining_time',
        'source_pool': 'source_pool',
        'started_at': 'started_at',
        'status': 'status',
        'stripes': 'stripes',
        'task': 'task',
        'update': 'update',
        'volume': 'volume'
    }

    def __init__(self, create=None, dest_pool=None, finished_at=None, host=None, id=None, remaining_time=None, source_pool=None, started_at=None, status=None, stripes=None, task=None, update=None, volume=None):  # noqa: E501
        """VolumeMigrationJob - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._dest_pool = None
        self._finished_at = None
        self._host = None
        self._id = None
        self._remaining_time = None
        self._source_pool = None
        self._started_at = None
        self._status = None
        self._stripes = None
        self._task = None
        self._update = None
        self._volume = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if dest_pool is not None:
            self.dest_pool = dest_pool
        if finished_at is not None:
            self.finished_at = finished_at
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if remaining_time is not None:
            self.remaining_time = remaining_time
        if source_pool is not None:
            self.source_pool = source_pool
        if started_at is not None:
            self.started_at = started_at
        if status is not None:
            self.status = status
        if stripes is not None:
            self.stripes = stripes
        if task is not None:
            self.task = task
        if update is not None:
            self.update = update
        if volume is not None:
            self.volume = volume

    @property
    def create(self):
        """Gets the create of this VolumeMigrationJob.  # noqa: E501


        :return: The create of this VolumeMigrationJob.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this VolumeMigrationJob.


        :param create: The create of this VolumeMigrationJob.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def dest_pool(self):
        """Gets the dest_pool of this VolumeMigrationJob.  # noqa: E501


        :return: The dest_pool of this VolumeMigrationJob.  # noqa: E501
        :rtype: PoolNestview
        """
        return self._dest_pool

    @dest_pool.setter
    def dest_pool(self, dest_pool):
        """Sets the dest_pool of this VolumeMigrationJob.


        :param dest_pool: The dest_pool of this VolumeMigrationJob.  # noqa: E501
        :type: PoolNestview
        """

        self._dest_pool = dest_pool

    @property
    def finished_at(self):
        """Gets the finished_at of this VolumeMigrationJob.  # noqa: E501


        :return: The finished_at of this VolumeMigrationJob.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this VolumeMigrationJob.


        :param finished_at: The finished_at of this VolumeMigrationJob.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def host(self):
        """Gets the host of this VolumeMigrationJob.  # noqa: E501


        :return: The host of this VolumeMigrationJob.  # noqa: E501
        :rtype: HostNestview
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this VolumeMigrationJob.


        :param host: The host of this VolumeMigrationJob.  # noqa: E501
        :type: HostNestview
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this VolumeMigrationJob.  # noqa: E501


        :return: The id of this VolumeMigrationJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumeMigrationJob.


        :param id: The id of this VolumeMigrationJob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def remaining_time(self):
        """Gets the remaining_time of this VolumeMigrationJob.  # noqa: E501


        :return: The remaining_time of this VolumeMigrationJob.  # noqa: E501
        :rtype: int
        """
        return self._remaining_time

    @remaining_time.setter
    def remaining_time(self, remaining_time):
        """Sets the remaining_time of this VolumeMigrationJob.


        :param remaining_time: The remaining_time of this VolumeMigrationJob.  # noqa: E501
        :type: int
        """

        self._remaining_time = remaining_time

    @property
    def source_pool(self):
        """Gets the source_pool of this VolumeMigrationJob.  # noqa: E501


        :return: The source_pool of this VolumeMigrationJob.  # noqa: E501
        :rtype: PoolNestview
        """
        return self._source_pool

    @source_pool.setter
    def source_pool(self, source_pool):
        """Sets the source_pool of this VolumeMigrationJob.


        :param source_pool: The source_pool of this VolumeMigrationJob.  # noqa: E501
        :type: PoolNestview
        """

        self._source_pool = source_pool

    @property
    def started_at(self):
        """Gets the started_at of this VolumeMigrationJob.  # noqa: E501


        :return: The started_at of this VolumeMigrationJob.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this VolumeMigrationJob.


        :param started_at: The started_at of this VolumeMigrationJob.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this VolumeMigrationJob.  # noqa: E501


        :return: The status of this VolumeMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VolumeMigrationJob.


        :param status: The status of this VolumeMigrationJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def stripes(self):
        """Gets the stripes of this VolumeMigrationJob.  # noqa: E501


        :return: The stripes of this VolumeMigrationJob.  # noqa: E501
        :rtype: int
        """
        return self._stripes

    @stripes.setter
    def stripes(self, stripes):
        """Sets the stripes of this VolumeMigrationJob.


        :param stripes: The stripes of this VolumeMigrationJob.  # noqa: E501
        :type: int
        """

        self._stripes = stripes

    @property
    def task(self):
        """Gets the task of this VolumeMigrationJob.  # noqa: E501


        :return: The task of this VolumeMigrationJob.  # noqa: E501
        :rtype: Task
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this VolumeMigrationJob.


        :param task: The task of this VolumeMigrationJob.  # noqa: E501
        :type: Task
        """

        self._task = task

    @property
    def update(self):
        """Gets the update of this VolumeMigrationJob.  # noqa: E501


        :return: The update of this VolumeMigrationJob.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this VolumeMigrationJob.


        :param update: The update of this VolumeMigrationJob.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def volume(self):
        """Gets the volume of this VolumeMigrationJob.  # noqa: E501


        :return: The volume of this VolumeMigrationJob.  # noqa: E501
        :rtype: VolumeNestview
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this VolumeMigrationJob.


        :param volume: The volume of this VolumeMigrationJob.  # noqa: E501
        :type: VolumeNestview
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeMigrationJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

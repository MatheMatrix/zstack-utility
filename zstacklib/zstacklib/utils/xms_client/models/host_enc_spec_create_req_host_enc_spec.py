# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.enclosure import Enclosure  # noqa: F401,E501


class HostEncSpecCreateReqHostEncSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enclosures': 'list[Enclosure]',
        'model': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'enclosures': 'enclosures',
        'model': 'model',
        'vendor': 'vendor'
    }

    def __init__(self, enclosures=None, model=None, vendor=None):  # noqa: E501
        """HostEncSpecCreateReqHostEncSpec - a model defined in Swagger"""  # noqa: E501

        self._enclosures = None
        self._model = None
        self._vendor = None
        self.discriminator = None

        self.enclosures = enclosures
        self.model = model
        self.vendor = vendor

    @property
    def enclosures(self):
        """Gets the enclosures of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501

        host enclosures  # noqa: E501

        :return: The enclosures of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501
        :rtype: list[Enclosure]
        """
        return self._enclosures

    @enclosures.setter
    def enclosures(self, enclosures):
        """Sets the enclosures of this HostEncSpecCreateReqHostEncSpec.

        host enclosures  # noqa: E501

        :param enclosures: The enclosures of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501
        :type: list[Enclosure]
        """
        if enclosures is None:
            raise ValueError("Invalid value for `enclosures`, must not be `None`")  # noqa: E501

        self._enclosures = enclosures

    @property
    def model(self):
        """Gets the model of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501

        host model  # noqa: E501

        :return: The model of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this HostEncSpecCreateReqHostEncSpec.

        host model  # noqa: E501

        :param model: The model of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def vendor(self):
        """Gets the vendor of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501

        host vendor  # noqa: E501

        :return: The vendor of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this HostEncSpecCreateReqHostEncSpec.

        host vendor  # noqa: E501

        :param vendor: The vendor of this HostEncSpecCreateReqHostEncSpec.  # noqa: E501
        :type: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostEncSpecCreateReqHostEncSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.volume_pair_info import VolumePairInfo  # noqa: F401,E501


class VolumeGroupSnapshotReplicationProtectionReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dest_volume_group_name': 'str',
        'dp_volume_group_snapshot_replication_policy_id': 'int',
        'initial_sync_time': 'datetime',
        'volume_pairs': 'list[VolumePairInfo]'
    }

    attribute_map = {
        'dest_volume_group_name': 'dest_volume_group_name',
        'dp_volume_group_snapshot_replication_policy_id': 'dp_volume_group_snapshot_replication_policy_id',
        'initial_sync_time': 'initial_sync_time',
        'volume_pairs': 'volume_pairs'
    }

    def __init__(self, dest_volume_group_name=None, dp_volume_group_snapshot_replication_policy_id=None, initial_sync_time=None, volume_pairs=None):  # noqa: E501
        """VolumeGroupSnapshotReplicationProtectionReq - a model defined in Swagger"""  # noqa: E501

        self._dest_volume_group_name = None
        self._dp_volume_group_snapshot_replication_policy_id = None
        self._initial_sync_time = None
        self._volume_pairs = None
        self.discriminator = None

        self.dest_volume_group_name = dest_volume_group_name
        self.dp_volume_group_snapshot_replication_policy_id = dp_volume_group_snapshot_replication_policy_id
        if initial_sync_time is not None:
            self.initial_sync_time = initial_sync_time
        self.volume_pairs = volume_pairs

    @property
    def dest_volume_group_name(self):
        """Gets the dest_volume_group_name of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501

        destination volume name  # noqa: E501

        :return: The dest_volume_group_name of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501
        :rtype: str
        """
        return self._dest_volume_group_name

    @dest_volume_group_name.setter
    def dest_volume_group_name(self, dest_volume_group_name):
        """Sets the dest_volume_group_name of this VolumeGroupSnapshotReplicationProtectionReq.

        destination volume name  # noqa: E501

        :param dest_volume_group_name: The dest_volume_group_name of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501
        :type: str
        """
        if dest_volume_group_name is None:
            raise ValueError("Invalid value for `dest_volume_group_name`, must not be `None`")  # noqa: E501

        self._dest_volume_group_name = dest_volume_group_name

    @property
    def dp_volume_group_snapshot_replication_policy_id(self):
        """Gets the dp_volume_group_snapshot_replication_policy_id of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501

        policy  # noqa: E501

        :return: The dp_volume_group_snapshot_replication_policy_id of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501
        :rtype: int
        """
        return self._dp_volume_group_snapshot_replication_policy_id

    @dp_volume_group_snapshot_replication_policy_id.setter
    def dp_volume_group_snapshot_replication_policy_id(self, dp_volume_group_snapshot_replication_policy_id):
        """Sets the dp_volume_group_snapshot_replication_policy_id of this VolumeGroupSnapshotReplicationProtectionReq.

        policy  # noqa: E501

        :param dp_volume_group_snapshot_replication_policy_id: The dp_volume_group_snapshot_replication_policy_id of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501
        :type: int
        """
        if dp_volume_group_snapshot_replication_policy_id is None:
            raise ValueError("Invalid value for `dp_volume_group_snapshot_replication_policy_id`, must not be `None`")  # noqa: E501

        self._dp_volume_group_snapshot_replication_policy_id = dp_volume_group_snapshot_replication_policy_id

    @property
    def initial_sync_time(self):
        """Gets the initial_sync_time of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501

        initial sync time  # noqa: E501

        :return: The initial_sync_time of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_sync_time

    @initial_sync_time.setter
    def initial_sync_time(self, initial_sync_time):
        """Sets the initial_sync_time of this VolumeGroupSnapshotReplicationProtectionReq.

        initial sync time  # noqa: E501

        :param initial_sync_time: The initial_sync_time of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501
        :type: datetime
        """

        self._initial_sync_time = initial_sync_time

    @property
    def volume_pairs(self):
        """Gets the volume_pairs of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501

        volume pairs  # noqa: E501

        :return: The volume_pairs of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501
        :rtype: list[VolumePairInfo]
        """
        return self._volume_pairs

    @volume_pairs.setter
    def volume_pairs(self, volume_pairs):
        """Sets the volume_pairs of this VolumeGroupSnapshotReplicationProtectionReq.

        volume pairs  # noqa: E501

        :param volume_pairs: The volume_pairs of this VolumeGroupSnapshotReplicationProtectionReq.  # noqa: E501
        :type: list[VolumePairInfo]
        """
        if volume_pairs is None:
            raise ValueError("Invalid value for `volume_pairs`, must not be `None`")  # noqa: E501

        self._volume_pairs = volume_pairs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupSnapshotReplicationProtectionReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

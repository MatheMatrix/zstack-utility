# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class AuthSecurityPolicyUpdateReqAuthSecurityPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'freeze_duration': 'int',
        'max_attempts': 'int',
        'password_expiration_warning': 'bool',
        'password_lifetime': 'int'
    }

    attribute_map = {
        'enabled': 'enabled',
        'freeze_duration': 'freeze_duration',
        'max_attempts': 'max_attempts',
        'password_expiration_warning': 'password_expiration_warning',
        'password_lifetime': 'password_lifetime'
    }

    def __init__(self, enabled=None, freeze_duration=None, max_attempts=None, password_expiration_warning=None, password_lifetime=None):  # noqa: E501
        """AuthSecurityPolicyUpdateReqAuthSecurityPolicy - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._freeze_duration = None
        self._max_attempts = None
        self._password_expiration_warning = None
        self._password_lifetime = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if freeze_duration is not None:
            self.freeze_duration = freeze_duration
        if max_attempts is not None:
            self.max_attempts = max_attempts
        if password_expiration_warning is not None:
            self.password_expiration_warning = password_expiration_warning
        if password_lifetime is not None:
            self.password_lifetime = password_lifetime

    @property
    def enabled(self):
        """Gets the enabled of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501


        :return: The enabled of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.


        :param enabled: The enabled of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def freeze_duration(self):
        """Gets the freeze_duration of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501


        :return: The freeze_duration of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :rtype: int
        """
        return self._freeze_duration

    @freeze_duration.setter
    def freeze_duration(self, freeze_duration):
        """Sets the freeze_duration of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.


        :param freeze_duration: The freeze_duration of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :type: int
        """

        self._freeze_duration = freeze_duration

    @property
    def max_attempts(self):
        """Gets the max_attempts of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501


        :return: The max_attempts of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_attempts

    @max_attempts.setter
    def max_attempts(self, max_attempts):
        """Sets the max_attempts of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.


        :param max_attempts: The max_attempts of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :type: int
        """

        self._max_attempts = max_attempts

    @property
    def password_expiration_warning(self):
        """Gets the password_expiration_warning of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501


        :return: The password_expiration_warning of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._password_expiration_warning

    @password_expiration_warning.setter
    def password_expiration_warning(self, password_expiration_warning):
        """Sets the password_expiration_warning of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.


        :param password_expiration_warning: The password_expiration_warning of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :type: bool
        """

        self._password_expiration_warning = password_expiration_warning

    @property
    def password_lifetime(self):
        """Gets the password_lifetime of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501


        :return: The password_lifetime of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :rtype: int
        """
        return self._password_lifetime

    @password_lifetime.setter
    def password_lifetime(self, password_lifetime):
        """Sets the password_lifetime of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.


        :param password_lifetime: The password_lifetime of this AuthSecurityPolicyUpdateReqAuthSecurityPolicy.  # noqa: E501
        :type: int
        """

        self._password_lifetime = password_lifetime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthSecurityPolicyUpdateReqAuthSecurityPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OSSearchEngineStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average_meta_query_latency': 'float',
        'create': 'datetime',
        'meta_query_pm': 'float',
        'sync_bandwidth_kbyte': 'float',
        'sync_objects_pm': 'float',
        'total_meta_num': 'int',
        'total_meta_size_bytes': 'int'
    }

    attribute_map = {
        'average_meta_query_latency': 'average_meta_query_latency',
        'create': 'create',
        'meta_query_pm': 'meta_query_pm',
        'sync_bandwidth_kbyte': 'sync_bandwidth_kbyte',
        'sync_objects_pm': 'sync_objects_pm',
        'total_meta_num': 'total_meta_num',
        'total_meta_size_bytes': 'total_meta_size_bytes'
    }

    def __init__(self, average_meta_query_latency=None, create=None, meta_query_pm=None, sync_bandwidth_kbyte=None, sync_objects_pm=None, total_meta_num=None, total_meta_size_bytes=None):  # noqa: E501
        """OSSearchEngineStat - a model defined in Swagger"""  # noqa: E501

        self._average_meta_query_latency = None
        self._create = None
        self._meta_query_pm = None
        self._sync_bandwidth_kbyte = None
        self._sync_objects_pm = None
        self._total_meta_num = None
        self._total_meta_size_bytes = None
        self.discriminator = None

        if average_meta_query_latency is not None:
            self.average_meta_query_latency = average_meta_query_latency
        if create is not None:
            self.create = create
        if meta_query_pm is not None:
            self.meta_query_pm = meta_query_pm
        if sync_bandwidth_kbyte is not None:
            self.sync_bandwidth_kbyte = sync_bandwidth_kbyte
        if sync_objects_pm is not None:
            self.sync_objects_pm = sync_objects_pm
        if total_meta_num is not None:
            self.total_meta_num = total_meta_num
        if total_meta_size_bytes is not None:
            self.total_meta_size_bytes = total_meta_size_bytes

    @property
    def average_meta_query_latency(self):
        """Gets the average_meta_query_latency of this OSSearchEngineStat.  # noqa: E501


        :return: The average_meta_query_latency of this OSSearchEngineStat.  # noqa: E501
        :rtype: float
        """
        return self._average_meta_query_latency

    @average_meta_query_latency.setter
    def average_meta_query_latency(self, average_meta_query_latency):
        """Sets the average_meta_query_latency of this OSSearchEngineStat.


        :param average_meta_query_latency: The average_meta_query_latency of this OSSearchEngineStat.  # noqa: E501
        :type: float
        """

        self._average_meta_query_latency = average_meta_query_latency

    @property
    def create(self):
        """Gets the create of this OSSearchEngineStat.  # noqa: E501


        :return: The create of this OSSearchEngineStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSSearchEngineStat.


        :param create: The create of this OSSearchEngineStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def meta_query_pm(self):
        """Gets the meta_query_pm of this OSSearchEngineStat.  # noqa: E501


        :return: The meta_query_pm of this OSSearchEngineStat.  # noqa: E501
        :rtype: float
        """
        return self._meta_query_pm

    @meta_query_pm.setter
    def meta_query_pm(self, meta_query_pm):
        """Sets the meta_query_pm of this OSSearchEngineStat.


        :param meta_query_pm: The meta_query_pm of this OSSearchEngineStat.  # noqa: E501
        :type: float
        """

        self._meta_query_pm = meta_query_pm

    @property
    def sync_bandwidth_kbyte(self):
        """Gets the sync_bandwidth_kbyte of this OSSearchEngineStat.  # noqa: E501


        :return: The sync_bandwidth_kbyte of this OSSearchEngineStat.  # noqa: E501
        :rtype: float
        """
        return self._sync_bandwidth_kbyte

    @sync_bandwidth_kbyte.setter
    def sync_bandwidth_kbyte(self, sync_bandwidth_kbyte):
        """Sets the sync_bandwidth_kbyte of this OSSearchEngineStat.


        :param sync_bandwidth_kbyte: The sync_bandwidth_kbyte of this OSSearchEngineStat.  # noqa: E501
        :type: float
        """

        self._sync_bandwidth_kbyte = sync_bandwidth_kbyte

    @property
    def sync_objects_pm(self):
        """Gets the sync_objects_pm of this OSSearchEngineStat.  # noqa: E501


        :return: The sync_objects_pm of this OSSearchEngineStat.  # noqa: E501
        :rtype: float
        """
        return self._sync_objects_pm

    @sync_objects_pm.setter
    def sync_objects_pm(self, sync_objects_pm):
        """Sets the sync_objects_pm of this OSSearchEngineStat.


        :param sync_objects_pm: The sync_objects_pm of this OSSearchEngineStat.  # noqa: E501
        :type: float
        """

        self._sync_objects_pm = sync_objects_pm

    @property
    def total_meta_num(self):
        """Gets the total_meta_num of this OSSearchEngineStat.  # noqa: E501


        :return: The total_meta_num of this OSSearchEngineStat.  # noqa: E501
        :rtype: int
        """
        return self._total_meta_num

    @total_meta_num.setter
    def total_meta_num(self, total_meta_num):
        """Sets the total_meta_num of this OSSearchEngineStat.


        :param total_meta_num: The total_meta_num of this OSSearchEngineStat.  # noqa: E501
        :type: int
        """

        self._total_meta_num = total_meta_num

    @property
    def total_meta_size_bytes(self):
        """Gets the total_meta_size_bytes of this OSSearchEngineStat.  # noqa: E501


        :return: The total_meta_size_bytes of this OSSearchEngineStat.  # noqa: E501
        :rtype: int
        """
        return self._total_meta_size_bytes

    @total_meta_size_bytes.setter
    def total_meta_size_bytes(self, total_meta_size_bytes):
        """Sets the total_meta_size_bytes of this OSSearchEngineStat.


        :param total_meta_size_bytes: The total_meta_size_bytes of this OSSearchEngineStat.  # noqa: E501
        :type: int
        """

        self._total_meta_size_bytes = total_meta_size_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSSearchEngineStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

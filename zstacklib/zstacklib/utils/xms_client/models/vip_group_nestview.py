# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class VIPGroupNestview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'network': 'str',
        'resource_id': 'int',
        'resource_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'network': 'network',
        'resource_id': 'resource_id',
        'resource_type': 'resource_type'
    }

    def __init__(self, id=None, name=None, network=None, resource_id=None, resource_type=None):  # noqa: E501
        """VIPGroupNestview - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._network = None
        self._resource_id = None
        self._resource_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if network is not None:
            self.network = network
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def id(self):
        """Gets the id of this VIPGroupNestview.  # noqa: E501


        :return: The id of this VIPGroupNestview.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VIPGroupNestview.


        :param id: The id of this VIPGroupNestview.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VIPGroupNestview.  # noqa: E501


        :return: The name of this VIPGroupNestview.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VIPGroupNestview.


        :param name: The name of this VIPGroupNestview.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this VIPGroupNestview.  # noqa: E501


        :return: The network of this VIPGroupNestview.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VIPGroupNestview.


        :param network: The network of this VIPGroupNestview.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def resource_id(self):
        """Gets the resource_id of this VIPGroupNestview.  # noqa: E501


        :return: The resource_id of this VIPGroupNestview.  # noqa: E501
        :rtype: int
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this VIPGroupNestview.


        :param resource_id: The resource_id of this VIPGroupNestview.  # noqa: E501
        :type: int
        """

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this VIPGroupNestview.  # noqa: E501


        :return: The resource_type of this VIPGroupNestview.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this VIPGroupNestview.


        :param resource_type: The resource_type of this VIPGroupNestview.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VIPGroupNestview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

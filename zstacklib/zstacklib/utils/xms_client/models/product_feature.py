# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class ProductFeature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'functions': 'list[str]',
        'limits': 'dict(str, str)',
        'name': 'str',
        'protocols': 'list[str]'
    }

    attribute_map = {
        'functions': 'functions',
        'limits': 'limits',
        'name': 'name',
        'protocols': 'protocols'
    }

    def __init__(self, functions=None, limits=None, name=None, protocols=None):  # noqa: E501
        """ProductFeature - a model defined in Swagger"""  # noqa: E501

        self._functions = None
        self._limits = None
        self._name = None
        self._protocols = None
        self.discriminator = None

        if functions is not None:
            self.functions = functions
        if limits is not None:
            self.limits = limits
        if name is not None:
            self.name = name
        if protocols is not None:
            self.protocols = protocols

    @property
    def functions(self):
        """Gets the functions of this ProductFeature.  # noqa: E501


        :return: The functions of this ProductFeature.  # noqa: E501
        :rtype: list[str]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this ProductFeature.


        :param functions: The functions of this ProductFeature.  # noqa: E501
        :type: list[str]
        """

        self._functions = functions

    @property
    def limits(self):
        """Gets the limits of this ProductFeature.  # noqa: E501

        for viewing only  # noqa: E501

        :return: The limits of this ProductFeature.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this ProductFeature.

        for viewing only  # noqa: E501

        :param limits: The limits of this ProductFeature.  # noqa: E501
        :type: dict(str, str)
        """

        self._limits = limits

    @property
    def name(self):
        """Gets the name of this ProductFeature.  # noqa: E501


        :return: The name of this ProductFeature.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductFeature.


        :param name: The name of this ProductFeature.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protocols(self):
        """Gets the protocols of this ProductFeature.  # noqa: E501


        :return: The protocols of this ProductFeature.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ProductFeature.


        :param protocols: The protocols of this ProductFeature.  # noqa: E501
        :type: list[str]
        """

        self._protocols = protocols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class BucketFlag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'get_trigger_restore': 'bool',
        'readonly': 'bool',
        'tier_cache': 'bool',
        'tier_retain_external_object': 'bool',
        'tier_worm': 'bool',
        'versioned': 'bool',
        'versions_suspended': 'bool',
        'worm': 'bool'
    }

    attribute_map = {
        'get_trigger_restore': 'get_trigger_restore',
        'readonly': 'readonly',
        'tier_cache': 'tier_cache',
        'tier_retain_external_object': 'tier_retain_external_object',
        'tier_worm': 'tier_worm',
        'versioned': 'versioned',
        'versions_suspended': 'versions_suspended',
        'worm': 'worm'
    }

    def __init__(self, get_trigger_restore=None, readonly=None, tier_cache=None, tier_retain_external_object=None, tier_worm=None, versioned=None, versions_suspended=None, worm=None):  # noqa: E501
        """BucketFlag - a model defined in Swagger"""  # noqa: E501

        self._get_trigger_restore = None
        self._readonly = None
        self._tier_cache = None
        self._tier_retain_external_object = None
        self._tier_worm = None
        self._versioned = None
        self._versions_suspended = None
        self._worm = None
        self.discriminator = None

        if get_trigger_restore is not None:
            self.get_trigger_restore = get_trigger_restore
        if readonly is not None:
            self.readonly = readonly
        if tier_cache is not None:
            self.tier_cache = tier_cache
        if tier_retain_external_object is not None:
            self.tier_retain_external_object = tier_retain_external_object
        if tier_worm is not None:
            self.tier_worm = tier_worm
        if versioned is not None:
            self.versioned = versioned
        if versions_suspended is not None:
            self.versions_suspended = versions_suspended
        if worm is not None:
            self.worm = worm

    @property
    def get_trigger_restore(self):
        """Gets the get_trigger_restore of this BucketFlag.  # noqa: E501


        :return: The get_trigger_restore of this BucketFlag.  # noqa: E501
        :rtype: bool
        """
        return self._get_trigger_restore

    @get_trigger_restore.setter
    def get_trigger_restore(self, get_trigger_restore):
        """Sets the get_trigger_restore of this BucketFlag.


        :param get_trigger_restore: The get_trigger_restore of this BucketFlag.  # noqa: E501
        :type: bool
        """

        self._get_trigger_restore = get_trigger_restore

    @property
    def readonly(self):
        """Gets the readonly of this BucketFlag.  # noqa: E501


        :return: The readonly of this BucketFlag.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this BucketFlag.


        :param readonly: The readonly of this BucketFlag.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def tier_cache(self):
        """Gets the tier_cache of this BucketFlag.  # noqa: E501


        :return: The tier_cache of this BucketFlag.  # noqa: E501
        :rtype: bool
        """
        return self._tier_cache

    @tier_cache.setter
    def tier_cache(self, tier_cache):
        """Sets the tier_cache of this BucketFlag.


        :param tier_cache: The tier_cache of this BucketFlag.  # noqa: E501
        :type: bool
        """

        self._tier_cache = tier_cache

    @property
    def tier_retain_external_object(self):
        """Gets the tier_retain_external_object of this BucketFlag.  # noqa: E501

        set bucket local delete mode  # noqa: E501

        :return: The tier_retain_external_object of this BucketFlag.  # noqa: E501
        :rtype: bool
        """
        return self._tier_retain_external_object

    @tier_retain_external_object.setter
    def tier_retain_external_object(self, tier_retain_external_object):
        """Sets the tier_retain_external_object of this BucketFlag.

        set bucket local delete mode  # noqa: E501

        :param tier_retain_external_object: The tier_retain_external_object of this BucketFlag.  # noqa: E501
        :type: bool
        """

        self._tier_retain_external_object = tier_retain_external_object

    @property
    def tier_worm(self):
        """Gets the tier_worm of this BucketFlag.  # noqa: E501


        :return: The tier_worm of this BucketFlag.  # noqa: E501
        :rtype: bool
        """
        return self._tier_worm

    @tier_worm.setter
    def tier_worm(self, tier_worm):
        """Sets the tier_worm of this BucketFlag.


        :param tier_worm: The tier_worm of this BucketFlag.  # noqa: E501
        :type: bool
        """

        self._tier_worm = tier_worm

    @property
    def versioned(self):
        """Gets the versioned of this BucketFlag.  # noqa: E501


        :return: The versioned of this BucketFlag.  # noqa: E501
        :rtype: bool
        """
        return self._versioned

    @versioned.setter
    def versioned(self, versioned):
        """Sets the versioned of this BucketFlag.


        :param versioned: The versioned of this BucketFlag.  # noqa: E501
        :type: bool
        """

        self._versioned = versioned

    @property
    def versions_suspended(self):
        """Gets the versions_suspended of this BucketFlag.  # noqa: E501


        :return: The versions_suspended of this BucketFlag.  # noqa: E501
        :rtype: bool
        """
        return self._versions_suspended

    @versions_suspended.setter
    def versions_suspended(self, versions_suspended):
        """Sets the versions_suspended of this BucketFlag.


        :param versions_suspended: The versions_suspended of this BucketFlag.  # noqa: E501
        :type: bool
        """

        self._versions_suspended = versions_suspended

    @property
    def worm(self):
        """Gets the worm of this BucketFlag.  # noqa: E501


        :return: The worm of this BucketFlag.  # noqa: E501
        :rtype: bool
        """
        return self._worm

    @worm.setter
    def worm(self, worm):
        """Sets the worm of this BucketFlag.


        :param worm: The worm of this BucketFlag.  # noqa: E501
        :type: bool
        """

        self._worm = worm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BucketFlag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

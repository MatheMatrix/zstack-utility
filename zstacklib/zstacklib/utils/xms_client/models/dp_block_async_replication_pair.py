# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.dp_block_async_replication_policy_nestview import DpBlockAsyncReplicationPolicyNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.dp_volume_group_snapshot_replication_pair_nestview import DpVolumeGroupSnapshotReplicationPairNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.remote_cluster_nestview import RemoteClusterNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.volume_nestview import VolumeNestview  # noqa: F401,E501


class DpBlockAsyncReplicationPair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_volume': 'VolumeNestview',
        'connected': 'bool',
        'create': 'datetime',
        'dp_block_async_replication_policy': 'DpBlockAsyncReplicationPolicyNestview',
        'dp_volume_group_snapshot_replication_pair': 'DpVolumeGroupSnapshotReplicationPairNestview',
        'failovered': 'bool',
        'id': 'int',
        'last_success_time': 'datetime',
        'local_role': 'str',
        'pair_pool_id': 'int',
        'pair_pool_name': 'str',
        'pair_volume_id': 'int',
        'pair_volume_name': 'str',
        'paused': 'bool',
        'policy_cron': 'str',
        'pre_status': 'str',
        'remote_cluster': 'RemoteClusterNestview',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'block_volume': 'block_volume',
        'connected': 'connected',
        'create': 'create',
        'dp_block_async_replication_policy': 'dp_block_async_replication_policy',
        'dp_volume_group_snapshot_replication_pair': 'dp_volume_group_snapshot_replication_pair',
        'failovered': 'failovered',
        'id': 'id',
        'last_success_time': 'last_success_time',
        'local_role': 'local_role',
        'pair_pool_id': 'pair_pool_id',
        'pair_pool_name': 'pair_pool_name',
        'pair_volume_id': 'pair_volume_id',
        'pair_volume_name': 'pair_volume_name',
        'paused': 'paused',
        'policy_cron': 'policy_cron',
        'pre_status': 'pre_status',
        'remote_cluster': 'remote_cluster',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, block_volume=None, connected=None, create=None, dp_block_async_replication_policy=None, dp_volume_group_snapshot_replication_pair=None, failovered=None, id=None, last_success_time=None, local_role=None, pair_pool_id=None, pair_pool_name=None, pair_volume_id=None, pair_volume_name=None, paused=None, policy_cron=None, pre_status=None, remote_cluster=None, status=None, update=None):  # noqa: E501
        """DpBlockAsyncReplicationPair - a model defined in Swagger"""  # noqa: E501

        self._block_volume = None
        self._connected = None
        self._create = None
        self._dp_block_async_replication_policy = None
        self._dp_volume_group_snapshot_replication_pair = None
        self._failovered = None
        self._id = None
        self._last_success_time = None
        self._local_role = None
        self._pair_pool_id = None
        self._pair_pool_name = None
        self._pair_volume_id = None
        self._pair_volume_name = None
        self._paused = None
        self._policy_cron = None
        self._pre_status = None
        self._remote_cluster = None
        self._status = None
        self._update = None
        self.discriminator = None

        if block_volume is not None:
            self.block_volume = block_volume
        if connected is not None:
            self.connected = connected
        if create is not None:
            self.create = create
        if dp_block_async_replication_policy is not None:
            self.dp_block_async_replication_policy = dp_block_async_replication_policy
        if dp_volume_group_snapshot_replication_pair is not None:
            self.dp_volume_group_snapshot_replication_pair = dp_volume_group_snapshot_replication_pair
        if failovered is not None:
            self.failovered = failovered
        if id is not None:
            self.id = id
        if last_success_time is not None:
            self.last_success_time = last_success_time
        if local_role is not None:
            self.local_role = local_role
        if pair_pool_id is not None:
            self.pair_pool_id = pair_pool_id
        if pair_pool_name is not None:
            self.pair_pool_name = pair_pool_name
        if pair_volume_id is not None:
            self.pair_volume_id = pair_volume_id
        if pair_volume_name is not None:
            self.pair_volume_name = pair_volume_name
        if paused is not None:
            self.paused = paused
        if policy_cron is not None:
            self.policy_cron = policy_cron
        if pre_status is not None:
            self.pre_status = pre_status
        if remote_cluster is not None:
            self.remote_cluster = remote_cluster
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def block_volume(self):
        """Gets the block_volume of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The block_volume of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: VolumeNestview
        """
        return self._block_volume

    @block_volume.setter
    def block_volume(self, block_volume):
        """Sets the block_volume of this DpBlockAsyncReplicationPair.


        :param block_volume: The block_volume of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: VolumeNestview
        """

        self._block_volume = block_volume

    @property
    def connected(self):
        """Gets the connected of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The connected of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this DpBlockAsyncReplicationPair.


        :param connected: The connected of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def create(self):
        """Gets the create of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The create of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DpBlockAsyncReplicationPair.


        :param create: The create of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def dp_block_async_replication_policy(self):
        """Gets the dp_block_async_replication_policy of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The dp_block_async_replication_policy of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: DpBlockAsyncReplicationPolicyNestview
        """
        return self._dp_block_async_replication_policy

    @dp_block_async_replication_policy.setter
    def dp_block_async_replication_policy(self, dp_block_async_replication_policy):
        """Sets the dp_block_async_replication_policy of this DpBlockAsyncReplicationPair.


        :param dp_block_async_replication_policy: The dp_block_async_replication_policy of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: DpBlockAsyncReplicationPolicyNestview
        """

        self._dp_block_async_replication_policy = dp_block_async_replication_policy

    @property
    def dp_volume_group_snapshot_replication_pair(self):
        """Gets the dp_volume_group_snapshot_replication_pair of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The dp_volume_group_snapshot_replication_pair of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: DpVolumeGroupSnapshotReplicationPairNestview
        """
        return self._dp_volume_group_snapshot_replication_pair

    @dp_volume_group_snapshot_replication_pair.setter
    def dp_volume_group_snapshot_replication_pair(self, dp_volume_group_snapshot_replication_pair):
        """Sets the dp_volume_group_snapshot_replication_pair of this DpBlockAsyncReplicationPair.


        :param dp_volume_group_snapshot_replication_pair: The dp_volume_group_snapshot_replication_pair of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: DpVolumeGroupSnapshotReplicationPairNestview
        """

        self._dp_volume_group_snapshot_replication_pair = dp_volume_group_snapshot_replication_pair

    @property
    def failovered(self):
        """Gets the failovered of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The failovered of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: bool
        """
        return self._failovered

    @failovered.setter
    def failovered(self, failovered):
        """Sets the failovered of this DpBlockAsyncReplicationPair.


        :param failovered: The failovered of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: bool
        """

        self._failovered = failovered

    @property
    def id(self):
        """Gets the id of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The id of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DpBlockAsyncReplicationPair.


        :param id: The id of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_success_time(self):
        """Gets the last_success_time of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The last_success_time of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: datetime
        """
        return self._last_success_time

    @last_success_time.setter
    def last_success_time(self, last_success_time):
        """Sets the last_success_time of this DpBlockAsyncReplicationPair.


        :param last_success_time: The last_success_time of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: datetime
        """

        self._last_success_time = last_success_time

    @property
    def local_role(self):
        """Gets the local_role of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The local_role of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: str
        """
        return self._local_role

    @local_role.setter
    def local_role(self, local_role):
        """Sets the local_role of this DpBlockAsyncReplicationPair.


        :param local_role: The local_role of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: str
        """

        self._local_role = local_role

    @property
    def pair_pool_id(self):
        """Gets the pair_pool_id of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The pair_pool_id of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: int
        """
        return self._pair_pool_id

    @pair_pool_id.setter
    def pair_pool_id(self, pair_pool_id):
        """Sets the pair_pool_id of this DpBlockAsyncReplicationPair.


        :param pair_pool_id: The pair_pool_id of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: int
        """

        self._pair_pool_id = pair_pool_id

    @property
    def pair_pool_name(self):
        """Gets the pair_pool_name of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The pair_pool_name of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: str
        """
        return self._pair_pool_name

    @pair_pool_name.setter
    def pair_pool_name(self, pair_pool_name):
        """Sets the pair_pool_name of this DpBlockAsyncReplicationPair.


        :param pair_pool_name: The pair_pool_name of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: str
        """

        self._pair_pool_name = pair_pool_name

    @property
    def pair_volume_id(self):
        """Gets the pair_volume_id of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The pair_volume_id of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: int
        """
        return self._pair_volume_id

    @pair_volume_id.setter
    def pair_volume_id(self, pair_volume_id):
        """Sets the pair_volume_id of this DpBlockAsyncReplicationPair.


        :param pair_volume_id: The pair_volume_id of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: int
        """

        self._pair_volume_id = pair_volume_id

    @property
    def pair_volume_name(self):
        """Gets the pair_volume_name of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The pair_volume_name of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: str
        """
        return self._pair_volume_name

    @pair_volume_name.setter
    def pair_volume_name(self, pair_volume_name):
        """Sets the pair_volume_name of this DpBlockAsyncReplicationPair.


        :param pair_volume_name: The pair_volume_name of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: str
        """

        self._pair_volume_name = pair_volume_name

    @property
    def paused(self):
        """Gets the paused of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The paused of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this DpBlockAsyncReplicationPair.


        :param paused: The paused of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def policy_cron(self):
        """Gets the policy_cron of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The policy_cron of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: str
        """
        return self._policy_cron

    @policy_cron.setter
    def policy_cron(self, policy_cron):
        """Sets the policy_cron of this DpBlockAsyncReplicationPair.


        :param policy_cron: The policy_cron of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: str
        """

        self._policy_cron = policy_cron

    @property
    def pre_status(self):
        """Gets the pre_status of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The pre_status of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: str
        """
        return self._pre_status

    @pre_status.setter
    def pre_status(self, pre_status):
        """Sets the pre_status of this DpBlockAsyncReplicationPair.


        :param pre_status: The pre_status of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: str
        """

        self._pre_status = pre_status

    @property
    def remote_cluster(self):
        """Gets the remote_cluster of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The remote_cluster of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: RemoteClusterNestview
        """
        return self._remote_cluster

    @remote_cluster.setter
    def remote_cluster(self, remote_cluster):
        """Sets the remote_cluster of this DpBlockAsyncReplicationPair.


        :param remote_cluster: The remote_cluster of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: RemoteClusterNestview
        """

        self._remote_cluster = remote_cluster

    @property
    def status(self):
        """Gets the status of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The status of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DpBlockAsyncReplicationPair.


        :param status: The status of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this DpBlockAsyncReplicationPair.  # noqa: E501


        :return: The update of this DpBlockAsyncReplicationPair.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DpBlockAsyncReplicationPair.


        :param update: The update of this DpBlockAsyncReplicationPair.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpBlockAsyncReplicationPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

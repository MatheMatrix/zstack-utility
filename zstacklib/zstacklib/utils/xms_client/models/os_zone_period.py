# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OSZonePeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'create': 'datetime',
        'id': 'int',
        'master_os_zone_uuid': 'str',
        'next_master_os_zone_uuid': 'str',
        'period_id': 'str',
        'status': 'str',
        'update': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'action': 'action',
        'create': 'create',
        'id': 'id',
        'master_os_zone_uuid': 'master_os_zone_uuid',
        'next_master_os_zone_uuid': 'next_master_os_zone_uuid',
        'period_id': 'period_id',
        'status': 'status',
        'update': 'update',
        'uuid': 'uuid'
    }

    def __init__(self, action=None, create=None, id=None, master_os_zone_uuid=None, next_master_os_zone_uuid=None, period_id=None, status=None, update=None, uuid=None):  # noqa: E501
        """OSZonePeriod - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._create = None
        self._id = None
        self._master_os_zone_uuid = None
        self._next_master_os_zone_uuid = None
        self._period_id = None
        self._status = None
        self._update = None
        self._uuid = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if master_os_zone_uuid is not None:
            self.master_os_zone_uuid = master_os_zone_uuid
        if next_master_os_zone_uuid is not None:
            self.next_master_os_zone_uuid = next_master_os_zone_uuid
        if period_id is not None:
            self.period_id = period_id
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if uuid is not None:
            self.uuid = uuid

    @property
    def action(self):
        """Gets the action of this OSZonePeriod.  # noqa: E501


        :return: The action of this OSZonePeriod.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this OSZonePeriod.


        :param action: The action of this OSZonePeriod.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def create(self):
        """Gets the create of this OSZonePeriod.  # noqa: E501


        :return: The create of this OSZonePeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSZonePeriod.


        :param create: The create of this OSZonePeriod.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this OSZonePeriod.  # noqa: E501


        :return: The id of this OSZonePeriod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSZonePeriod.


        :param id: The id of this OSZonePeriod.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def master_os_zone_uuid(self):
        """Gets the master_os_zone_uuid of this OSZonePeriod.  # noqa: E501


        :return: The master_os_zone_uuid of this OSZonePeriod.  # noqa: E501
        :rtype: str
        """
        return self._master_os_zone_uuid

    @master_os_zone_uuid.setter
    def master_os_zone_uuid(self, master_os_zone_uuid):
        """Sets the master_os_zone_uuid of this OSZonePeriod.


        :param master_os_zone_uuid: The master_os_zone_uuid of this OSZonePeriod.  # noqa: E501
        :type: str
        """

        self._master_os_zone_uuid = master_os_zone_uuid

    @property
    def next_master_os_zone_uuid(self):
        """Gets the next_master_os_zone_uuid of this OSZonePeriod.  # noqa: E501


        :return: The next_master_os_zone_uuid of this OSZonePeriod.  # noqa: E501
        :rtype: str
        """
        return self._next_master_os_zone_uuid

    @next_master_os_zone_uuid.setter
    def next_master_os_zone_uuid(self, next_master_os_zone_uuid):
        """Sets the next_master_os_zone_uuid of this OSZonePeriod.


        :param next_master_os_zone_uuid: The next_master_os_zone_uuid of this OSZonePeriod.  # noqa: E501
        :type: str
        """

        self._next_master_os_zone_uuid = next_master_os_zone_uuid

    @property
    def period_id(self):
        """Gets the period_id of this OSZonePeriod.  # noqa: E501


        :return: The period_id of this OSZonePeriod.  # noqa: E501
        :rtype: str
        """
        return self._period_id

    @period_id.setter
    def period_id(self, period_id):
        """Sets the period_id of this OSZonePeriod.


        :param period_id: The period_id of this OSZonePeriod.  # noqa: E501
        :type: str
        """

        self._period_id = period_id

    @property
    def status(self):
        """Gets the status of this OSZonePeriod.  # noqa: E501


        :return: The status of this OSZonePeriod.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OSZonePeriod.


        :param status: The status of this OSZonePeriod.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this OSZonePeriod.  # noqa: E501


        :return: The update of this OSZonePeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this OSZonePeriod.


        :param update: The update of this OSZonePeriod.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def uuid(self):
        """Gets the uuid of this OSZonePeriod.  # noqa: E501


        :return: The uuid of this OSZonePeriod.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this OSZonePeriod.


        :param uuid: The uuid of this OSZonePeriod.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSZonePeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

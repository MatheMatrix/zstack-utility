# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.action_log_nestview import ActionLogNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.alert_nestview import AlertNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.host_nestview import HostNestview  # noqa: F401,E501


class ErrorRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_log': 'ActionLogNestview',
        'alert': 'AlertNestview',
        'code': 'str',
        'create': 'datetime',
        'details': 'str',
        'extra_data': 'object',
        'host': 'HostNestview',
        'id': 'int',
        'message': 'str'
    }

    attribute_map = {
        'action_log': 'action_log',
        'alert': 'alert',
        'code': 'code',
        'create': 'create',
        'details': 'details',
        'extra_data': 'extra_data',
        'host': 'host',
        'id': 'id',
        'message': 'message'
    }

    def __init__(self, action_log=None, alert=None, code=None, create=None, details=None, extra_data=None, host=None, id=None, message=None):  # noqa: E501
        """ErrorRecord - a model defined in Swagger"""  # noqa: E501

        self._action_log = None
        self._alert = None
        self._code = None
        self._create = None
        self._details = None
        self._extra_data = None
        self._host = None
        self._id = None
        self._message = None
        self.discriminator = None

        if action_log is not None:
            self.action_log = action_log
        if alert is not None:
            self.alert = alert
        if code is not None:
            self.code = code
        if create is not None:
            self.create = create
        if details is not None:
            self.details = details
        if extra_data is not None:
            self.extra_data = extra_data
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message

    @property
    def action_log(self):
        """Gets the action_log of this ErrorRecord.  # noqa: E501


        :return: The action_log of this ErrorRecord.  # noqa: E501
        :rtype: ActionLogNestview
        """
        return self._action_log

    @action_log.setter
    def action_log(self, action_log):
        """Sets the action_log of this ErrorRecord.


        :param action_log: The action_log of this ErrorRecord.  # noqa: E501
        :type: ActionLogNestview
        """

        self._action_log = action_log

    @property
    def alert(self):
        """Gets the alert of this ErrorRecord.  # noqa: E501


        :return: The alert of this ErrorRecord.  # noqa: E501
        :rtype: AlertNestview
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this ErrorRecord.


        :param alert: The alert of this ErrorRecord.  # noqa: E501
        :type: AlertNestview
        """

        self._alert = alert

    @property
    def code(self):
        """Gets the code of this ErrorRecord.  # noqa: E501


        :return: The code of this ErrorRecord.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorRecord.


        :param code: The code of this ErrorRecord.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def create(self):
        """Gets the create of this ErrorRecord.  # noqa: E501


        :return: The create of this ErrorRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this ErrorRecord.


        :param create: The create of this ErrorRecord.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def details(self):
        """Gets the details of this ErrorRecord.  # noqa: E501


        :return: The details of this ErrorRecord.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ErrorRecord.


        :param details: The details of this ErrorRecord.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def extra_data(self):
        """Gets the extra_data of this ErrorRecord.  # noqa: E501


        :return: The extra_data of this ErrorRecord.  # noqa: E501
        :rtype: object
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this ErrorRecord.


        :param extra_data: The extra_data of this ErrorRecord.  # noqa: E501
        :type: object
        """

        self._extra_data = extra_data

    @property
    def host(self):
        """Gets the host of this ErrorRecord.  # noqa: E501


        :return: The host of this ErrorRecord.  # noqa: E501
        :rtype: HostNestview
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ErrorRecord.


        :param host: The host of this ErrorRecord.  # noqa: E501
        :type: HostNestview
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this ErrorRecord.  # noqa: E501


        :return: The id of this ErrorRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErrorRecord.


        :param id: The id of this ErrorRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this ErrorRecord.  # noqa: E501


        :return: The message of this ErrorRecord.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorRecord.


        :param message: The message of this ErrorRecord.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

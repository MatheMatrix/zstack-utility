# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class NetworkDiagnosis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'diagnose_active_num': 'int',
        'diagnose_error_num': 'int',
        'diagnose_num': 'int',
        'diagnose_warning_num': 'int',
        'diagnosing_num': 'int',
        'host_num': 'int',
        'id': 'int',
        'networks': 'list[str]',
        'not_diagnose_num': 'int',
        'progress': 'float',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'create': 'create',
        'diagnose_active_num': 'diagnose_active_num',
        'diagnose_error_num': 'diagnose_error_num',
        'diagnose_num': 'diagnose_num',
        'diagnose_warning_num': 'diagnose_warning_num',
        'diagnosing_num': 'diagnosing_num',
        'host_num': 'host_num',
        'id': 'id',
        'networks': 'networks',
        'not_diagnose_num': 'not_diagnose_num',
        'progress': 'progress',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, create=None, diagnose_active_num=None, diagnose_error_num=None, diagnose_num=None, diagnose_warning_num=None, diagnosing_num=None, host_num=None, id=None, networks=None, not_diagnose_num=None, progress=None, status=None, update=None):  # noqa: E501
        """NetworkDiagnosis - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._diagnose_active_num = None
        self._diagnose_error_num = None
        self._diagnose_num = None
        self._diagnose_warning_num = None
        self._diagnosing_num = None
        self._host_num = None
        self._id = None
        self._networks = None
        self._not_diagnose_num = None
        self._progress = None
        self._status = None
        self._update = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if diagnose_active_num is not None:
            self.diagnose_active_num = diagnose_active_num
        if diagnose_error_num is not None:
            self.diagnose_error_num = diagnose_error_num
        if diagnose_num is not None:
            self.diagnose_num = diagnose_num
        if diagnose_warning_num is not None:
            self.diagnose_warning_num = diagnose_warning_num
        if diagnosing_num is not None:
            self.diagnosing_num = diagnosing_num
        if host_num is not None:
            self.host_num = host_num
        if id is not None:
            self.id = id
        if networks is not None:
            self.networks = networks
        if not_diagnose_num is not None:
            self.not_diagnose_num = not_diagnose_num
        if progress is not None:
            self.progress = progress
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def create(self):
        """Gets the create of this NetworkDiagnosis.  # noqa: E501


        :return: The create of this NetworkDiagnosis.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this NetworkDiagnosis.


        :param create: The create of this NetworkDiagnosis.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def diagnose_active_num(self):
        """Gets the diagnose_active_num of this NetworkDiagnosis.  # noqa: E501


        :return: The diagnose_active_num of this NetworkDiagnosis.  # noqa: E501
        :rtype: int
        """
        return self._diagnose_active_num

    @diagnose_active_num.setter
    def diagnose_active_num(self, diagnose_active_num):
        """Sets the diagnose_active_num of this NetworkDiagnosis.


        :param diagnose_active_num: The diagnose_active_num of this NetworkDiagnosis.  # noqa: E501
        :type: int
        """

        self._diagnose_active_num = diagnose_active_num

    @property
    def diagnose_error_num(self):
        """Gets the diagnose_error_num of this NetworkDiagnosis.  # noqa: E501


        :return: The diagnose_error_num of this NetworkDiagnosis.  # noqa: E501
        :rtype: int
        """
        return self._diagnose_error_num

    @diagnose_error_num.setter
    def diagnose_error_num(self, diagnose_error_num):
        """Sets the diagnose_error_num of this NetworkDiagnosis.


        :param diagnose_error_num: The diagnose_error_num of this NetworkDiagnosis.  # noqa: E501
        :type: int
        """

        self._diagnose_error_num = diagnose_error_num

    @property
    def diagnose_num(self):
        """Gets the diagnose_num of this NetworkDiagnosis.  # noqa: E501


        :return: The diagnose_num of this NetworkDiagnosis.  # noqa: E501
        :rtype: int
        """
        return self._diagnose_num

    @diagnose_num.setter
    def diagnose_num(self, diagnose_num):
        """Sets the diagnose_num of this NetworkDiagnosis.


        :param diagnose_num: The diagnose_num of this NetworkDiagnosis.  # noqa: E501
        :type: int
        """

        self._diagnose_num = diagnose_num

    @property
    def diagnose_warning_num(self):
        """Gets the diagnose_warning_num of this NetworkDiagnosis.  # noqa: E501


        :return: The diagnose_warning_num of this NetworkDiagnosis.  # noqa: E501
        :rtype: int
        """
        return self._diagnose_warning_num

    @diagnose_warning_num.setter
    def diagnose_warning_num(self, diagnose_warning_num):
        """Sets the diagnose_warning_num of this NetworkDiagnosis.


        :param diagnose_warning_num: The diagnose_warning_num of this NetworkDiagnosis.  # noqa: E501
        :type: int
        """

        self._diagnose_warning_num = diagnose_warning_num

    @property
    def diagnosing_num(self):
        """Gets the diagnosing_num of this NetworkDiagnosis.  # noqa: E501


        :return: The diagnosing_num of this NetworkDiagnosis.  # noqa: E501
        :rtype: int
        """
        return self._diagnosing_num

    @diagnosing_num.setter
    def diagnosing_num(self, diagnosing_num):
        """Sets the diagnosing_num of this NetworkDiagnosis.


        :param diagnosing_num: The diagnosing_num of this NetworkDiagnosis.  # noqa: E501
        :type: int
        """

        self._diagnosing_num = diagnosing_num

    @property
    def host_num(self):
        """Gets the host_num of this NetworkDiagnosis.  # noqa: E501


        :return: The host_num of this NetworkDiagnosis.  # noqa: E501
        :rtype: int
        """
        return self._host_num

    @host_num.setter
    def host_num(self, host_num):
        """Sets the host_num of this NetworkDiagnosis.


        :param host_num: The host_num of this NetworkDiagnosis.  # noqa: E501
        :type: int
        """

        self._host_num = host_num

    @property
    def id(self):
        """Gets the id of this NetworkDiagnosis.  # noqa: E501


        :return: The id of this NetworkDiagnosis.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkDiagnosis.


        :param id: The id of this NetworkDiagnosis.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def networks(self):
        """Gets the networks of this NetworkDiagnosis.  # noqa: E501


        :return: The networks of this NetworkDiagnosis.  # noqa: E501
        :rtype: list[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this NetworkDiagnosis.


        :param networks: The networks of this NetworkDiagnosis.  # noqa: E501
        :type: list[str]
        """

        self._networks = networks

    @property
    def not_diagnose_num(self):
        """Gets the not_diagnose_num of this NetworkDiagnosis.  # noqa: E501


        :return: The not_diagnose_num of this NetworkDiagnosis.  # noqa: E501
        :rtype: int
        """
        return self._not_diagnose_num

    @not_diagnose_num.setter
    def not_diagnose_num(self, not_diagnose_num):
        """Sets the not_diagnose_num of this NetworkDiagnosis.


        :param not_diagnose_num: The not_diagnose_num of this NetworkDiagnosis.  # noqa: E501
        :type: int
        """

        self._not_diagnose_num = not_diagnose_num

    @property
    def progress(self):
        """Gets the progress of this NetworkDiagnosis.  # noqa: E501


        :return: The progress of this NetworkDiagnosis.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this NetworkDiagnosis.


        :param progress: The progress of this NetworkDiagnosis.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this NetworkDiagnosis.  # noqa: E501


        :return: The status of this NetworkDiagnosis.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NetworkDiagnosis.


        :param status: The status of this NetworkDiagnosis.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this NetworkDiagnosis.  # noqa: E501


        :return: The update of this NetworkDiagnosis.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this NetworkDiagnosis.


        :param update: The update of this NetworkDiagnosis.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkDiagnosis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

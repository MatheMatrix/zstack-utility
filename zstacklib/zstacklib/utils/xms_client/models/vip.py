# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.vip_group_nestview import VIPGroupNestview  # noqa: F401,E501


class VIP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'create': 'datetime',
        'id': 'int',
        'ip': 'str',
        'mac_address': 'str',
        'mask': 'int',
        'status': 'str',
        'update': 'datetime',
        'vip_group': 'VIPGroupNestview',
        'virtual_router_id': 'int'
    }

    attribute_map = {
        'action_status': 'action_status',
        'create': 'create',
        'id': 'id',
        'ip': 'ip',
        'mac_address': 'mac_address',
        'mask': 'mask',
        'status': 'status',
        'update': 'update',
        'vip_group': 'vip_group',
        'virtual_router_id': 'virtual_router_id'
    }

    def __init__(self, action_status=None, create=None, id=None, ip=None, mac_address=None, mask=None, status=None, update=None, vip_group=None, virtual_router_id=None):  # noqa: E501
        """VIP - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._create = None
        self._id = None
        self._ip = None
        self._mac_address = None
        self._mask = None
        self._status = None
        self._update = None
        self._vip_group = None
        self._virtual_router_id = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if ip is not None:
            self.ip = ip
        if mac_address is not None:
            self.mac_address = mac_address
        if mask is not None:
            self.mask = mask
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if vip_group is not None:
            self.vip_group = vip_group
        if virtual_router_id is not None:
            self.virtual_router_id = virtual_router_id

    @property
    def action_status(self):
        """Gets the action_status of this VIP.  # noqa: E501


        :return: The action_status of this VIP.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this VIP.


        :param action_status: The action_status of this VIP.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def create(self):
        """Gets the create of this VIP.  # noqa: E501


        :return: The create of this VIP.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this VIP.


        :param create: The create of this VIP.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this VIP.  # noqa: E501


        :return: The id of this VIP.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VIP.


        :param id: The id of this VIP.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this VIP.  # noqa: E501


        :return: The ip of this VIP.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this VIP.


        :param ip: The ip of this VIP.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def mac_address(self):
        """Gets the mac_address of this VIP.  # noqa: E501


        :return: The mac_address of this VIP.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this VIP.


        :param mac_address: The mac_address of this VIP.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mask(self):
        """Gets the mask of this VIP.  # noqa: E501


        :return: The mask of this VIP.  # noqa: E501
        :rtype: int
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this VIP.


        :param mask: The mask of this VIP.  # noqa: E501
        :type: int
        """

        self._mask = mask

    @property
    def status(self):
        """Gets the status of this VIP.  # noqa: E501


        :return: The status of this VIP.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VIP.


        :param status: The status of this VIP.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this VIP.  # noqa: E501


        :return: The update of this VIP.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this VIP.


        :param update: The update of this VIP.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def vip_group(self):
        """Gets the vip_group of this VIP.  # noqa: E501


        :return: The vip_group of this VIP.  # noqa: E501
        :rtype: VIPGroupNestview
        """
        return self._vip_group

    @vip_group.setter
    def vip_group(self, vip_group):
        """Sets the vip_group of this VIP.


        :param vip_group: The vip_group of this VIP.  # noqa: E501
        :type: VIPGroupNestview
        """

        self._vip_group = vip_group

    @property
    def virtual_router_id(self):
        """Gets the virtual_router_id of this VIP.  # noqa: E501


        :return: The virtual_router_id of this VIP.  # noqa: E501
        :rtype: int
        """
        return self._virtual_router_id

    @virtual_router_id.setter
    def virtual_router_id(self, virtual_router_id):
        """Sets the virtual_router_id of this VIP.


        :param virtual_router_id: The virtual_router_id of this VIP.  # noqa: E501
        :type: int
        """

        self._virtual_router_id = virtual_router_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VIP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

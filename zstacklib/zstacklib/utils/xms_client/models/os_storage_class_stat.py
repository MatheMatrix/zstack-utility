# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OSStorageClassStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocated_objects': 'int',
        'allocated_size': 'int',
        'cache_allocated_objects': 'int',
        'cache_allocated_size': 'int',
        'class_name': 'str'
    }

    attribute_map = {
        'allocated_objects': 'allocated_objects',
        'allocated_size': 'allocated_size',
        'cache_allocated_objects': 'cache_allocated_objects',
        'cache_allocated_size': 'cache_allocated_size',
        'class_name': 'class_name'
    }

    def __init__(self, allocated_objects=None, allocated_size=None, cache_allocated_objects=None, cache_allocated_size=None, class_name=None):  # noqa: E501
        """OSStorageClassStat - a model defined in Swagger"""  # noqa: E501

        self._allocated_objects = None
        self._allocated_size = None
        self._cache_allocated_objects = None
        self._cache_allocated_size = None
        self._class_name = None
        self.discriminator = None

        if allocated_objects is not None:
            self.allocated_objects = allocated_objects
        if allocated_size is not None:
            self.allocated_size = allocated_size
        if cache_allocated_objects is not None:
            self.cache_allocated_objects = cache_allocated_objects
        if cache_allocated_size is not None:
            self.cache_allocated_size = cache_allocated_size
        if class_name is not None:
            self.class_name = class_name

    @property
    def allocated_objects(self):
        """Gets the allocated_objects of this OSStorageClassStat.  # noqa: E501


        :return: The allocated_objects of this OSStorageClassStat.  # noqa: E501
        :rtype: int
        """
        return self._allocated_objects

    @allocated_objects.setter
    def allocated_objects(self, allocated_objects):
        """Sets the allocated_objects of this OSStorageClassStat.


        :param allocated_objects: The allocated_objects of this OSStorageClassStat.  # noqa: E501
        :type: int
        """

        self._allocated_objects = allocated_objects

    @property
    def allocated_size(self):
        """Gets the allocated_size of this OSStorageClassStat.  # noqa: E501


        :return: The allocated_size of this OSStorageClassStat.  # noqa: E501
        :rtype: int
        """
        return self._allocated_size

    @allocated_size.setter
    def allocated_size(self, allocated_size):
        """Sets the allocated_size of this OSStorageClassStat.


        :param allocated_size: The allocated_size of this OSStorageClassStat.  # noqa: E501
        :type: int
        """

        self._allocated_size = allocated_size

    @property
    def cache_allocated_objects(self):
        """Gets the cache_allocated_objects of this OSStorageClassStat.  # noqa: E501


        :return: The cache_allocated_objects of this OSStorageClassStat.  # noqa: E501
        :rtype: int
        """
        return self._cache_allocated_objects

    @cache_allocated_objects.setter
    def cache_allocated_objects(self, cache_allocated_objects):
        """Sets the cache_allocated_objects of this OSStorageClassStat.


        :param cache_allocated_objects: The cache_allocated_objects of this OSStorageClassStat.  # noqa: E501
        :type: int
        """

        self._cache_allocated_objects = cache_allocated_objects

    @property
    def cache_allocated_size(self):
        """Gets the cache_allocated_size of this OSStorageClassStat.  # noqa: E501


        :return: The cache_allocated_size of this OSStorageClassStat.  # noqa: E501
        :rtype: int
        """
        return self._cache_allocated_size

    @cache_allocated_size.setter
    def cache_allocated_size(self, cache_allocated_size):
        """Sets the cache_allocated_size of this OSStorageClassStat.


        :param cache_allocated_size: The cache_allocated_size of this OSStorageClassStat.  # noqa: E501
        :type: int
        """

        self._cache_allocated_size = cache_allocated_size

    @property
    def class_name(self):
        """Gets the class_name of this OSStorageClassStat.  # noqa: E501

        ClassName used in GetObjectStorageUserSamples  # noqa: E501

        :return: The class_name of this OSStorageClassStat.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this OSStorageClassStat.

        ClassName used in GetObjectStorageUserSamples  # noqa: E501

        :param class_name: The class_name of this OSStorageClassStat.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSStorageClassStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

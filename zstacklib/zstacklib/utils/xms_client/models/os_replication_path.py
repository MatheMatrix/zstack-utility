# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.object_storage_zone_nestview import ObjectStorageZoneNestview  # noqa: F401,E501


class OSReplicationPath(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'os_zone_uuids': 'list[str]',
        'os_zones': 'list[ObjectStorageZoneNestview]',
        'replication_uuid': 'str',
        'status': 'str',
        'suspended': 'bool',
        'update': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'create': 'create',
        'os_zone_uuids': 'os_zone_uuids',
        'os_zones': 'os_zones',
        'replication_uuid': 'replication_uuid',
        'status': 'status',
        'suspended': 'suspended',
        'update': 'update',
        'uuid': 'uuid'
    }

    def __init__(self, create=None, os_zone_uuids=None, os_zones=None, replication_uuid=None, status=None, suspended=None, update=None, uuid=None):  # noqa: E501
        """OSReplicationPath - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._os_zone_uuids = None
        self._os_zones = None
        self._replication_uuid = None
        self._status = None
        self._suspended = None
        self._update = None
        self._uuid = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if os_zone_uuids is not None:
            self.os_zone_uuids = os_zone_uuids
        if os_zones is not None:
            self.os_zones = os_zones
        if replication_uuid is not None:
            self.replication_uuid = replication_uuid
        if status is not None:
            self.status = status
        if suspended is not None:
            self.suspended = suspended
        if update is not None:
            self.update = update
        if uuid is not None:
            self.uuid = uuid

    @property
    def create(self):
        """Gets the create of this OSReplicationPath.  # noqa: E501


        :return: The create of this OSReplicationPath.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSReplicationPath.


        :param create: The create of this OSReplicationPath.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def os_zone_uuids(self):
        """Gets the os_zone_uuids of this OSReplicationPath.  # noqa: E501


        :return: The os_zone_uuids of this OSReplicationPath.  # noqa: E501
        :rtype: list[str]
        """
        return self._os_zone_uuids

    @os_zone_uuids.setter
    def os_zone_uuids(self, os_zone_uuids):
        """Sets the os_zone_uuids of this OSReplicationPath.


        :param os_zone_uuids: The os_zone_uuids of this OSReplicationPath.  # noqa: E501
        :type: list[str]
        """

        self._os_zone_uuids = os_zone_uuids

    @property
    def os_zones(self):
        """Gets the os_zones of this OSReplicationPath.  # noqa: E501


        :return: The os_zones of this OSReplicationPath.  # noqa: E501
        :rtype: list[ObjectStorageZoneNestview]
        """
        return self._os_zones

    @os_zones.setter
    def os_zones(self, os_zones):
        """Sets the os_zones of this OSReplicationPath.


        :param os_zones: The os_zones of this OSReplicationPath.  # noqa: E501
        :type: list[ObjectStorageZoneNestview]
        """

        self._os_zones = os_zones

    @property
    def replication_uuid(self):
        """Gets the replication_uuid of this OSReplicationPath.  # noqa: E501


        :return: The replication_uuid of this OSReplicationPath.  # noqa: E501
        :rtype: str
        """
        return self._replication_uuid

    @replication_uuid.setter
    def replication_uuid(self, replication_uuid):
        """Sets the replication_uuid of this OSReplicationPath.


        :param replication_uuid: The replication_uuid of this OSReplicationPath.  # noqa: E501
        :type: str
        """

        self._replication_uuid = replication_uuid

    @property
    def status(self):
        """Gets the status of this OSReplicationPath.  # noqa: E501


        :return: The status of this OSReplicationPath.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OSReplicationPath.


        :param status: The status of this OSReplicationPath.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def suspended(self):
        """Gets the suspended of this OSReplicationPath.  # noqa: E501


        :return: The suspended of this OSReplicationPath.  # noqa: E501
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this OSReplicationPath.


        :param suspended: The suspended of this OSReplicationPath.  # noqa: E501
        :type: bool
        """

        self._suspended = suspended

    @property
    def update(self):
        """Gets the update of this OSReplicationPath.  # noqa: E501


        :return: The update of this OSReplicationPath.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this OSReplicationPath.


        :param update: The update of this OSReplicationPath.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def uuid(self):
        """Gets the uuid of this OSReplicationPath.  # noqa: E501


        :return: The uuid of this OSReplicationPath.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this OSReplicationPath.


        :param uuid: The uuid of this OSReplicationPath.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSReplicationPath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

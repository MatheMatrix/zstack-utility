# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.disk_nestview import DiskNestview  # noqa: F401,E501


class Partition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'create': 'datetime',
        'disk': 'DiskNestview',
        'id': 'int',
        'omap_byte': 'int',
        'omap_device_path': 'str',
        'path': 'str',
        'size': 'int',
        'status': 'str',
        'update': 'datetime',
        'used': 'bool',
        'uuid': 'str',
        'version': 'int'
    }

    attribute_map = {
        'action_status': 'action_status',
        'create': 'create',
        'disk': 'disk',
        'id': 'id',
        'omap_byte': 'omap_byte',
        'omap_device_path': 'omap_device_path',
        'path': 'path',
        'size': 'size',
        'status': 'status',
        'update': 'update',
        'used': 'used',
        'uuid': 'uuid',
        'version': 'version'
    }

    def __init__(self, action_status=None, create=None, disk=None, id=None, omap_byte=None, omap_device_path=None, path=None, size=None, status=None, update=None, used=None, uuid=None, version=None):  # noqa: E501
        """Partition - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._create = None
        self._disk = None
        self._id = None
        self._omap_byte = None
        self._omap_device_path = None
        self._path = None
        self._size = None
        self._status = None
        self._update = None
        self._used = None
        self._uuid = None
        self._version = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if create is not None:
            self.create = create
        if disk is not None:
            self.disk = disk
        if id is not None:
            self.id = id
        if omap_byte is not None:
            self.omap_byte = omap_byte
        if omap_device_path is not None:
            self.omap_device_path = omap_device_path
        if path is not None:
            self.path = path
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if used is not None:
            self.used = used
        if uuid is not None:
            self.uuid = uuid
        if version is not None:
            self.version = version

    @property
    def action_status(self):
        """Gets the action_status of this Partition.  # noqa: E501


        :return: The action_status of this Partition.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this Partition.


        :param action_status: The action_status of this Partition.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def create(self):
        """Gets the create of this Partition.  # noqa: E501


        :return: The create of this Partition.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this Partition.


        :param create: The create of this Partition.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def disk(self):
        """Gets the disk of this Partition.  # noqa: E501


        :return: The disk of this Partition.  # noqa: E501
        :rtype: DiskNestview
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this Partition.


        :param disk: The disk of this Partition.  # noqa: E501
        :type: DiskNestview
        """

        self._disk = disk

    @property
    def id(self):
        """Gets the id of this Partition.  # noqa: E501


        :return: The id of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Partition.


        :param id: The id of this Partition.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def omap_byte(self):
        """Gets the omap_byte of this Partition.  # noqa: E501


        :return: The omap_byte of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._omap_byte

    @omap_byte.setter
    def omap_byte(self, omap_byte):
        """Sets the omap_byte of this Partition.


        :param omap_byte: The omap_byte of this Partition.  # noqa: E501
        :type: int
        """

        self._omap_byte = omap_byte

    @property
    def omap_device_path(self):
        """Gets the omap_device_path of this Partition.  # noqa: E501


        :return: The omap_device_path of this Partition.  # noqa: E501
        :rtype: str
        """
        return self._omap_device_path

    @omap_device_path.setter
    def omap_device_path(self, omap_device_path):
        """Sets the omap_device_path of this Partition.


        :param omap_device_path: The omap_device_path of this Partition.  # noqa: E501
        :type: str
        """

        self._omap_device_path = omap_device_path

    @property
    def path(self):
        """Gets the path of this Partition.  # noqa: E501


        :return: The path of this Partition.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Partition.


        :param path: The path of this Partition.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def size(self):
        """Gets the size of this Partition.  # noqa: E501


        :return: The size of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Partition.


        :param size: The size of this Partition.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this Partition.  # noqa: E501


        :return: The status of this Partition.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Partition.


        :param status: The status of this Partition.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this Partition.  # noqa: E501


        :return: The update of this Partition.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this Partition.


        :param update: The update of this Partition.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def used(self):
        """Gets the used of this Partition.  # noqa: E501


        :return: The used of this Partition.  # noqa: E501
        :rtype: bool
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this Partition.


        :param used: The used of this Partition.  # noqa: E501
        :type: bool
        """

        self._used = used

    @property
    def uuid(self):
        """Gets the uuid of this Partition.  # noqa: E501


        :return: The uuid of this Partition.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Partition.


        :param uuid: The uuid of this Partition.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def version(self):
        """Gets the version of this Partition.  # noqa: E501


        :return: The version of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Partition.


        :param version: The version of this Partition.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Partition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

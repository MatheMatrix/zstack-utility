# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.bucket_flag import BucketFlag  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.object_storage_bucket import ObjectStorageBucket  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.object_storage_bucket_nestview import ObjectStorageBucketNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.object_storage_bucket_stat import ObjectStorageBucketStat  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.object_storage_lifecycle import ObjectStorageLifecycle  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.object_storage_policy_nestview import ObjectStoragePolicyNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.object_storage_user_nestview import ObjectStorageUserNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.object_storage_zone_nestview import ObjectStorageZoneNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.os_bucket_logging_grant import OSBucketLoggingGrant  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.os_bucket_object_storage_class import OSBucketObjectStorageClass  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.remote_cluster_nestview import RemoteClusterNestview  # noqa: F401,E501


class ObjectStorageBucketRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'all_user_permission': 'str',
        'auth_user_permission': 'str',
        'bucket_policy': 'str',
        'create': 'datetime',
        'external_quota_max_objects': 'int',
        'external_quota_max_size': 'int',
        'flag': 'BucketFlag',
        'id': 'int',
        'lifecycle': 'ObjectStorageLifecycle',
        'local_quota_max_objects': 'int',
        'local_quota_max_size': 'int',
        'log_delivery_permission': 'str',
        'logging_enabled': 'bool',
        'logging_grants': 'list[OSBucketLoggingGrant]',
        'logging_owner': 'ObjectStorageUserNestview',
        'logging_prefix': 'str',
        'logging_suspended': 'bool',
        'logging_target_bucket': 'ObjectStorageBucketNestview',
        'metadata_search_enabled': 'bool',
        'name': 'str',
        'nfs_client_num': 'int',
        'object_storage_class': 'OSBucketObjectStorageClass',
        'os_replication_path_num': 'int',
        'os_replication_zone_num': 'int',
        'os_zone': 'ObjectStorageZoneNestview',
        'os_zone_uuid': 'str',
        'owner': 'ObjectStorageUserNestview',
        'owner_permission': 'str',
        'policy': 'ObjectStoragePolicyNestview',
        'policy_enabled': 'bool',
        'quota_max_objects': 'int',
        'quota_max_size': 'int',
        'remote_cluster': 'RemoteClusterNestview',
        'replication_uuid': 'str',
        'restore_days': 'int',
        'shards': 'int',
        'specification_objects': 'int',
        'status': 'str',
        'update': 'datetime',
        'virtual': 'bool',
        'samples': 'list[ObjectStorageBucketStat]'
    }

    attribute_map = {
        'action_status': 'action_status',
        'all_user_permission': 'all_user_permission',
        'auth_user_permission': 'auth_user_permission',
        'bucket_policy': 'bucket_policy',
        'create': 'create',
        'external_quota_max_objects': 'external_quota_max_objects',
        'external_quota_max_size': 'external_quota_max_size',
        'flag': 'flag',
        'id': 'id',
        'lifecycle': 'lifecycle',
        'local_quota_max_objects': 'local_quota_max_objects',
        'local_quota_max_size': 'local_quota_max_size',
        'log_delivery_permission': 'log_delivery_permission',
        'logging_enabled': 'logging_enabled',
        'logging_grants': 'logging_grants',
        'logging_owner': 'logging_owner',
        'logging_prefix': 'logging_prefix',
        'logging_suspended': 'logging_suspended',
        'logging_target_bucket': 'logging_target_bucket',
        'metadata_search_enabled': 'metadata_search_enabled',
        'name': 'name',
        'nfs_client_num': 'nfs_client_num',
        'object_storage_class': 'object_storage_class',
        'os_replication_path_num': 'os_replication_path_num',
        'os_replication_zone_num': 'os_replication_zone_num',
        'os_zone': 'os_zone',
        'os_zone_uuid': 'os_zone_uuid',
        'owner': 'owner',
        'owner_permission': 'owner_permission',
        'policy': 'policy',
        'policy_enabled': 'policy_enabled',
        'quota_max_objects': 'quota_max_objects',
        'quota_max_size': 'quota_max_size',
        'remote_cluster': 'remote_cluster',
        'replication_uuid': 'replication_uuid',
        'restore_days': 'restore_days',
        'shards': 'shards',
        'specification_objects': 'specification_objects',
        'status': 'status',
        'update': 'update',
        'virtual': 'virtual',
        'samples': 'samples'
    }

    def __init__(self, action_status=None, all_user_permission=None, auth_user_permission=None, bucket_policy=None, create=None, external_quota_max_objects=None, external_quota_max_size=None, flag=None, id=None, lifecycle=None, local_quota_max_objects=None, local_quota_max_size=None, log_delivery_permission=None, logging_enabled=None, logging_grants=None, logging_owner=None, logging_prefix=None, logging_suspended=None, logging_target_bucket=None, metadata_search_enabled=None, name=None, nfs_client_num=None, object_storage_class=None, os_replication_path_num=None, os_replication_zone_num=None, os_zone=None, os_zone_uuid=None, owner=None, owner_permission=None, policy=None, policy_enabled=None, quota_max_objects=None, quota_max_size=None, remote_cluster=None, replication_uuid=None, restore_days=None, shards=None, specification_objects=None, status=None, update=None, virtual=None, samples=None):  # noqa: E501
        """ObjectStorageBucketRecord - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._all_user_permission = None
        self._auth_user_permission = None
        self._bucket_policy = None
        self._create = None
        self._external_quota_max_objects = None
        self._external_quota_max_size = None
        self._flag = None
        self._id = None
        self._lifecycle = None
        self._local_quota_max_objects = None
        self._local_quota_max_size = None
        self._log_delivery_permission = None
        self._logging_enabled = None
        self._logging_grants = None
        self._logging_owner = None
        self._logging_prefix = None
        self._logging_suspended = None
        self._logging_target_bucket = None
        self._metadata_search_enabled = None
        self._name = None
        self._nfs_client_num = None
        self._object_storage_class = None
        self._os_replication_path_num = None
        self._os_replication_zone_num = None
        self._os_zone = None
        self._os_zone_uuid = None
        self._owner = None
        self._owner_permission = None
        self._policy = None
        self._policy_enabled = None
        self._quota_max_objects = None
        self._quota_max_size = None
        self._remote_cluster = None
        self._replication_uuid = None
        self._restore_days = None
        self._shards = None
        self._specification_objects = None
        self._status = None
        self._update = None
        self._virtual = None
        self._samples = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if all_user_permission is not None:
            self.all_user_permission = all_user_permission
        if auth_user_permission is not None:
            self.auth_user_permission = auth_user_permission
        if bucket_policy is not None:
            self.bucket_policy = bucket_policy
        if create is not None:
            self.create = create
        if external_quota_max_objects is not None:
            self.external_quota_max_objects = external_quota_max_objects
        if external_quota_max_size is not None:
            self.external_quota_max_size = external_quota_max_size
        if flag is not None:
            self.flag = flag
        if id is not None:
            self.id = id
        if lifecycle is not None:
            self.lifecycle = lifecycle
        if local_quota_max_objects is not None:
            self.local_quota_max_objects = local_quota_max_objects
        if local_quota_max_size is not None:
            self.local_quota_max_size = local_quota_max_size
        if log_delivery_permission is not None:
            self.log_delivery_permission = log_delivery_permission
        if logging_enabled is not None:
            self.logging_enabled = logging_enabled
        if logging_grants is not None:
            self.logging_grants = logging_grants
        if logging_owner is not None:
            self.logging_owner = logging_owner
        if logging_prefix is not None:
            self.logging_prefix = logging_prefix
        if logging_suspended is not None:
            self.logging_suspended = logging_suspended
        if logging_target_bucket is not None:
            self.logging_target_bucket = logging_target_bucket
        if metadata_search_enabled is not None:
            self.metadata_search_enabled = metadata_search_enabled
        if name is not None:
            self.name = name
        if nfs_client_num is not None:
            self.nfs_client_num = nfs_client_num
        if object_storage_class is not None:
            self.object_storage_class = object_storage_class
        if os_replication_path_num is not None:
            self.os_replication_path_num = os_replication_path_num
        if os_replication_zone_num is not None:
            self.os_replication_zone_num = os_replication_zone_num
        if os_zone is not None:
            self.os_zone = os_zone
        if os_zone_uuid is not None:
            self.os_zone_uuid = os_zone_uuid
        if owner is not None:
            self.owner = owner
        if owner_permission is not None:
            self.owner_permission = owner_permission
        if policy is not None:
            self.policy = policy
        if policy_enabled is not None:
            self.policy_enabled = policy_enabled
        if quota_max_objects is not None:
            self.quota_max_objects = quota_max_objects
        if quota_max_size is not None:
            self.quota_max_size = quota_max_size
        if remote_cluster is not None:
            self.remote_cluster = remote_cluster
        if replication_uuid is not None:
            self.replication_uuid = replication_uuid
        if restore_days is not None:
            self.restore_days = restore_days
        if shards is not None:
            self.shards = shards
        if specification_objects is not None:
            self.specification_objects = specification_objects
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if virtual is not None:
            self.virtual = virtual
        if samples is not None:
            self.samples = samples

    @property
    def action_status(self):
        """Gets the action_status of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The action_status of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this ObjectStorageBucketRecord.


        :param action_status: The action_status of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def all_user_permission(self):
        """Gets the all_user_permission of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The all_user_permission of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._all_user_permission

    @all_user_permission.setter
    def all_user_permission(self, all_user_permission):
        """Sets the all_user_permission of this ObjectStorageBucketRecord.


        :param all_user_permission: The all_user_permission of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._all_user_permission = all_user_permission

    @property
    def auth_user_permission(self):
        """Gets the auth_user_permission of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The auth_user_permission of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._auth_user_permission

    @auth_user_permission.setter
    def auth_user_permission(self, auth_user_permission):
        """Sets the auth_user_permission of this ObjectStorageBucketRecord.


        :param auth_user_permission: The auth_user_permission of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._auth_user_permission = auth_user_permission

    @property
    def bucket_policy(self):
        """Gets the bucket_policy of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The bucket_policy of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._bucket_policy

    @bucket_policy.setter
    def bucket_policy(self, bucket_policy):
        """Sets the bucket_policy of this ObjectStorageBucketRecord.


        :param bucket_policy: The bucket_policy of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._bucket_policy = bucket_policy

    @property
    def create(self):
        """Gets the create of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The create of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this ObjectStorageBucketRecord.


        :param create: The create of this ObjectStorageBucketRecord.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def external_quota_max_objects(self):
        """Gets the external_quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The external_quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._external_quota_max_objects

    @external_quota_max_objects.setter
    def external_quota_max_objects(self, external_quota_max_objects):
        """Sets the external_quota_max_objects of this ObjectStorageBucketRecord.


        :param external_quota_max_objects: The external_quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._external_quota_max_objects = external_quota_max_objects

    @property
    def external_quota_max_size(self):
        """Gets the external_quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The external_quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._external_quota_max_size

    @external_quota_max_size.setter
    def external_quota_max_size(self, external_quota_max_size):
        """Sets the external_quota_max_size of this ObjectStorageBucketRecord.


        :param external_quota_max_size: The external_quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._external_quota_max_size = external_quota_max_size

    @property
    def flag(self):
        """Gets the flag of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The flag of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: BucketFlag
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this ObjectStorageBucketRecord.


        :param flag: The flag of this ObjectStorageBucketRecord.  # noqa: E501
        :type: BucketFlag
        """

        self._flag = flag

    @property
    def id(self):
        """Gets the id of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The id of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectStorageBucketRecord.


        :param id: The id of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lifecycle(self):
        """Gets the lifecycle of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The lifecycle of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: ObjectStorageLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this ObjectStorageBucketRecord.


        :param lifecycle: The lifecycle of this ObjectStorageBucketRecord.  # noqa: E501
        :type: ObjectStorageLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def local_quota_max_objects(self):
        """Gets the local_quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The local_quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._local_quota_max_objects

    @local_quota_max_objects.setter
    def local_quota_max_objects(self, local_quota_max_objects):
        """Sets the local_quota_max_objects of this ObjectStorageBucketRecord.


        :param local_quota_max_objects: The local_quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._local_quota_max_objects = local_quota_max_objects

    @property
    def local_quota_max_size(self):
        """Gets the local_quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The local_quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._local_quota_max_size

    @local_quota_max_size.setter
    def local_quota_max_size(self, local_quota_max_size):
        """Sets the local_quota_max_size of this ObjectStorageBucketRecord.


        :param local_quota_max_size: The local_quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._local_quota_max_size = local_quota_max_size

    @property
    def log_delivery_permission(self):
        """Gets the log_delivery_permission of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The log_delivery_permission of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._log_delivery_permission

    @log_delivery_permission.setter
    def log_delivery_permission(self, log_delivery_permission):
        """Sets the log_delivery_permission of this ObjectStorageBucketRecord.


        :param log_delivery_permission: The log_delivery_permission of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._log_delivery_permission = log_delivery_permission

    @property
    def logging_enabled(self):
        """Gets the logging_enabled of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The logging_enabled of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: bool
        """
        return self._logging_enabled

    @logging_enabled.setter
    def logging_enabled(self, logging_enabled):
        """Sets the logging_enabled of this ObjectStorageBucketRecord.


        :param logging_enabled: The logging_enabled of this ObjectStorageBucketRecord.  # noqa: E501
        :type: bool
        """

        self._logging_enabled = logging_enabled

    @property
    def logging_grants(self):
        """Gets the logging_grants of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The logging_grants of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: list[OSBucketLoggingGrant]
        """
        return self._logging_grants

    @logging_grants.setter
    def logging_grants(self, logging_grants):
        """Sets the logging_grants of this ObjectStorageBucketRecord.


        :param logging_grants: The logging_grants of this ObjectStorageBucketRecord.  # noqa: E501
        :type: list[OSBucketLoggingGrant]
        """

        self._logging_grants = logging_grants

    @property
    def logging_owner(self):
        """Gets the logging_owner of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The logging_owner of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: ObjectStorageUserNestview
        """
        return self._logging_owner

    @logging_owner.setter
    def logging_owner(self, logging_owner):
        """Sets the logging_owner of this ObjectStorageBucketRecord.


        :param logging_owner: The logging_owner of this ObjectStorageBucketRecord.  # noqa: E501
        :type: ObjectStorageUserNestview
        """

        self._logging_owner = logging_owner

    @property
    def logging_prefix(self):
        """Gets the logging_prefix of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The logging_prefix of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._logging_prefix

    @logging_prefix.setter
    def logging_prefix(self, logging_prefix):
        """Sets the logging_prefix of this ObjectStorageBucketRecord.


        :param logging_prefix: The logging_prefix of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._logging_prefix = logging_prefix

    @property
    def logging_suspended(self):
        """Gets the logging_suspended of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The logging_suspended of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: bool
        """
        return self._logging_suspended

    @logging_suspended.setter
    def logging_suspended(self, logging_suspended):
        """Sets the logging_suspended of this ObjectStorageBucketRecord.


        :param logging_suspended: The logging_suspended of this ObjectStorageBucketRecord.  # noqa: E501
        :type: bool
        """

        self._logging_suspended = logging_suspended

    @property
    def logging_target_bucket(self):
        """Gets the logging_target_bucket of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The logging_target_bucket of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: ObjectStorageBucketNestview
        """
        return self._logging_target_bucket

    @logging_target_bucket.setter
    def logging_target_bucket(self, logging_target_bucket):
        """Sets the logging_target_bucket of this ObjectStorageBucketRecord.


        :param logging_target_bucket: The logging_target_bucket of this ObjectStorageBucketRecord.  # noqa: E501
        :type: ObjectStorageBucketNestview
        """

        self._logging_target_bucket = logging_target_bucket

    @property
    def metadata_search_enabled(self):
        """Gets the metadata_search_enabled of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The metadata_search_enabled of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: bool
        """
        return self._metadata_search_enabled

    @metadata_search_enabled.setter
    def metadata_search_enabled(self, metadata_search_enabled):
        """Sets the metadata_search_enabled of this ObjectStorageBucketRecord.


        :param metadata_search_enabled: The metadata_search_enabled of this ObjectStorageBucketRecord.  # noqa: E501
        :type: bool
        """

        self._metadata_search_enabled = metadata_search_enabled

    @property
    def name(self):
        """Gets the name of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The name of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectStorageBucketRecord.


        :param name: The name of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nfs_client_num(self):
        """Gets the nfs_client_num of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The nfs_client_num of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._nfs_client_num

    @nfs_client_num.setter
    def nfs_client_num(self, nfs_client_num):
        """Sets the nfs_client_num of this ObjectStorageBucketRecord.


        :param nfs_client_num: The nfs_client_num of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._nfs_client_num = nfs_client_num

    @property
    def object_storage_class(self):
        """Gets the object_storage_class of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The object_storage_class of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: OSBucketObjectStorageClass
        """
        return self._object_storage_class

    @object_storage_class.setter
    def object_storage_class(self, object_storage_class):
        """Sets the object_storage_class of this ObjectStorageBucketRecord.


        :param object_storage_class: The object_storage_class of this ObjectStorageBucketRecord.  # noqa: E501
        :type: OSBucketObjectStorageClass
        """

        self._object_storage_class = object_storage_class

    @property
    def os_replication_path_num(self):
        """Gets the os_replication_path_num of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The os_replication_path_num of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._os_replication_path_num

    @os_replication_path_num.setter
    def os_replication_path_num(self, os_replication_path_num):
        """Sets the os_replication_path_num of this ObjectStorageBucketRecord.


        :param os_replication_path_num: The os_replication_path_num of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._os_replication_path_num = os_replication_path_num

    @property
    def os_replication_zone_num(self):
        """Gets the os_replication_zone_num of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The os_replication_zone_num of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._os_replication_zone_num

    @os_replication_zone_num.setter
    def os_replication_zone_num(self, os_replication_zone_num):
        """Sets the os_replication_zone_num of this ObjectStorageBucketRecord.


        :param os_replication_zone_num: The os_replication_zone_num of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._os_replication_zone_num = os_replication_zone_num

    @property
    def os_zone(self):
        """Gets the os_zone of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The os_zone of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: ObjectStorageZoneNestview
        """
        return self._os_zone

    @os_zone.setter
    def os_zone(self, os_zone):
        """Sets the os_zone of this ObjectStorageBucketRecord.


        :param os_zone: The os_zone of this ObjectStorageBucketRecord.  # noqa: E501
        :type: ObjectStorageZoneNestview
        """

        self._os_zone = os_zone

    @property
    def os_zone_uuid(self):
        """Gets the os_zone_uuid of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The os_zone_uuid of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._os_zone_uuid

    @os_zone_uuid.setter
    def os_zone_uuid(self, os_zone_uuid):
        """Sets the os_zone_uuid of this ObjectStorageBucketRecord.


        :param os_zone_uuid: The os_zone_uuid of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._os_zone_uuid = os_zone_uuid

    @property
    def owner(self):
        """Gets the owner of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The owner of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: ObjectStorageUserNestview
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ObjectStorageBucketRecord.


        :param owner: The owner of this ObjectStorageBucketRecord.  # noqa: E501
        :type: ObjectStorageUserNestview
        """

        self._owner = owner

    @property
    def owner_permission(self):
        """Gets the owner_permission of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The owner_permission of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._owner_permission

    @owner_permission.setter
    def owner_permission(self, owner_permission):
        """Sets the owner_permission of this ObjectStorageBucketRecord.


        :param owner_permission: The owner_permission of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._owner_permission = owner_permission

    @property
    def policy(self):
        """Gets the policy of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The policy of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: ObjectStoragePolicyNestview
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ObjectStorageBucketRecord.


        :param policy: The policy of this ObjectStorageBucketRecord.  # noqa: E501
        :type: ObjectStoragePolicyNestview
        """

        self._policy = policy

    @property
    def policy_enabled(self):
        """Gets the policy_enabled of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The policy_enabled of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: bool
        """
        return self._policy_enabled

    @policy_enabled.setter
    def policy_enabled(self, policy_enabled):
        """Sets the policy_enabled of this ObjectStorageBucketRecord.


        :param policy_enabled: The policy_enabled of this ObjectStorageBucketRecord.  # noqa: E501
        :type: bool
        """

        self._policy_enabled = policy_enabled

    @property
    def quota_max_objects(self):
        """Gets the quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._quota_max_objects

    @quota_max_objects.setter
    def quota_max_objects(self, quota_max_objects):
        """Sets the quota_max_objects of this ObjectStorageBucketRecord.


        :param quota_max_objects: The quota_max_objects of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._quota_max_objects = quota_max_objects

    @property
    def quota_max_size(self):
        """Gets the quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._quota_max_size

    @quota_max_size.setter
    def quota_max_size(self, quota_max_size):
        """Sets the quota_max_size of this ObjectStorageBucketRecord.


        :param quota_max_size: The quota_max_size of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._quota_max_size = quota_max_size

    @property
    def remote_cluster(self):
        """Gets the remote_cluster of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The remote_cluster of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: RemoteClusterNestview
        """
        return self._remote_cluster

    @remote_cluster.setter
    def remote_cluster(self, remote_cluster):
        """Sets the remote_cluster of this ObjectStorageBucketRecord.


        :param remote_cluster: The remote_cluster of this ObjectStorageBucketRecord.  # noqa: E501
        :type: RemoteClusterNestview
        """

        self._remote_cluster = remote_cluster

    @property
    def replication_uuid(self):
        """Gets the replication_uuid of this ObjectStorageBucketRecord.  # noqa: E501

        NOTE: Use name of bucket as replication uuid for simplicity  # noqa: E501

        :return: The replication_uuid of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._replication_uuid

    @replication_uuid.setter
    def replication_uuid(self, replication_uuid):
        """Sets the replication_uuid of this ObjectStorageBucketRecord.

        NOTE: Use name of bucket as replication uuid for simplicity  # noqa: E501

        :param replication_uuid: The replication_uuid of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._replication_uuid = replication_uuid

    @property
    def restore_days(self):
        """Gets the restore_days of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The restore_days of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._restore_days

    @restore_days.setter
    def restore_days(self, restore_days):
        """Sets the restore_days of this ObjectStorageBucketRecord.


        :param restore_days: The restore_days of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._restore_days = restore_days

    @property
    def shards(self):
        """Gets the shards of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The shards of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this ObjectStorageBucketRecord.


        :param shards: The shards of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._shards = shards

    @property
    def specification_objects(self):
        """Gets the specification_objects of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The specification_objects of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: int
        """
        return self._specification_objects

    @specification_objects.setter
    def specification_objects(self, specification_objects):
        """Sets the specification_objects of this ObjectStorageBucketRecord.


        :param specification_objects: The specification_objects of this ObjectStorageBucketRecord.  # noqa: E501
        :type: int
        """

        self._specification_objects = specification_objects

    @property
    def status(self):
        """Gets the status of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The status of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ObjectStorageBucketRecord.


        :param status: The status of this ObjectStorageBucketRecord.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The update of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this ObjectStorageBucketRecord.


        :param update: The update of this ObjectStorageBucketRecord.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def virtual(self):
        """Gets the virtual of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The virtual of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: bool
        """
        return self._virtual

    @virtual.setter
    def virtual(self, virtual):
        """Sets the virtual of this ObjectStorageBucketRecord.


        :param virtual: The virtual of this ObjectStorageBucketRecord.  # noqa: E501
        :type: bool
        """

        self._virtual = virtual

    @property
    def samples(self):
        """Gets the samples of this ObjectStorageBucketRecord.  # noqa: E501


        :return: The samples of this ObjectStorageBucketRecord.  # noqa: E501
        :rtype: list[ObjectStorageBucketStat]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this ObjectStorageBucketRecord.


        :param samples: The samples of this ObjectStorageBucketRecord.  # noqa: E501
        :type: list[ObjectStorageBucketStat]
        """

        self._samples = samples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStorageBucketRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.s3_load_balancer_group_nestview import S3LoadBalancerGroupNestview  # noqa: F401,E501
# from zstacklib.utils.xms_client.models.vm_flavor_nestview import VMFlavorNestview  # noqa: F401,E501


class OSSearchEngine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'allocated_size': 'int',
        'create': 'datetime',
        'gateway_data_size': 'int',
        'gateway_flavor': 'VMFlavorNestview',
        'gateway_http_port': 'int',
        'gateway_transport_port': 'int',
        'id': 'int',
        'search_s3_load_balancer_group': 'S3LoadBalancerGroupNestview',
        'size': 'int',
        'status': 'str',
        'sync_s3_load_balancer_group': 'S3LoadBalancerGroupNestview',
        'update': 'datetime'
    }

    attribute_map = {
        'action_status': 'action_status',
        'allocated_size': 'allocated_size',
        'create': 'create',
        'gateway_data_size': 'gateway_data_size',
        'gateway_flavor': 'gateway_flavor',
        'gateway_http_port': 'gateway_http_port',
        'gateway_transport_port': 'gateway_transport_port',
        'id': 'id',
        'search_s3_load_balancer_group': 'search_s3_load_balancer_group',
        'size': 'size',
        'status': 'status',
        'sync_s3_load_balancer_group': 'sync_s3_load_balancer_group',
        'update': 'update'
    }

    def __init__(self, action_status=None, allocated_size=None, create=None, gateway_data_size=None, gateway_flavor=None, gateway_http_port=None, gateway_transport_port=None, id=None, search_s3_load_balancer_group=None, size=None, status=None, sync_s3_load_balancer_group=None, update=None):  # noqa: E501
        """OSSearchEngine - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._allocated_size = None
        self._create = None
        self._gateway_data_size = None
        self._gateway_flavor = None
        self._gateway_http_port = None
        self._gateway_transport_port = None
        self._id = None
        self._search_s3_load_balancer_group = None
        self._size = None
        self._status = None
        self._sync_s3_load_balancer_group = None
        self._update = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if allocated_size is not None:
            self.allocated_size = allocated_size
        if create is not None:
            self.create = create
        if gateway_data_size is not None:
            self.gateway_data_size = gateway_data_size
        if gateway_flavor is not None:
            self.gateway_flavor = gateway_flavor
        if gateway_http_port is not None:
            self.gateway_http_port = gateway_http_port
        if gateway_transport_port is not None:
            self.gateway_transport_port = gateway_transport_port
        if id is not None:
            self.id = id
        if search_s3_load_balancer_group is not None:
            self.search_s3_load_balancer_group = search_s3_load_balancer_group
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if sync_s3_load_balancer_group is not None:
            self.sync_s3_load_balancer_group = sync_s3_load_balancer_group
        if update is not None:
            self.update = update

    @property
    def action_status(self):
        """Gets the action_status of this OSSearchEngine.  # noqa: E501


        :return: The action_status of this OSSearchEngine.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this OSSearchEngine.


        :param action_status: The action_status of this OSSearchEngine.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def allocated_size(self):
        """Gets the allocated_size of this OSSearchEngine.  # noqa: E501


        :return: The allocated_size of this OSSearchEngine.  # noqa: E501
        :rtype: int
        """
        return self._allocated_size

    @allocated_size.setter
    def allocated_size(self, allocated_size):
        """Sets the allocated_size of this OSSearchEngine.


        :param allocated_size: The allocated_size of this OSSearchEngine.  # noqa: E501
        :type: int
        """

        self._allocated_size = allocated_size

    @property
    def create(self):
        """Gets the create of this OSSearchEngine.  # noqa: E501


        :return: The create of this OSSearchEngine.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSSearchEngine.


        :param create: The create of this OSSearchEngine.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def gateway_data_size(self):
        """Gets the gateway_data_size of this OSSearchEngine.  # noqa: E501


        :return: The gateway_data_size of this OSSearchEngine.  # noqa: E501
        :rtype: int
        """
        return self._gateway_data_size

    @gateway_data_size.setter
    def gateway_data_size(self, gateway_data_size):
        """Sets the gateway_data_size of this OSSearchEngine.


        :param gateway_data_size: The gateway_data_size of this OSSearchEngine.  # noqa: E501
        :type: int
        """

        self._gateway_data_size = gateway_data_size

    @property
    def gateway_flavor(self):
        """Gets the gateway_flavor of this OSSearchEngine.  # noqa: E501


        :return: The gateway_flavor of this OSSearchEngine.  # noqa: E501
        :rtype: VMFlavorNestview
        """
        return self._gateway_flavor

    @gateway_flavor.setter
    def gateway_flavor(self, gateway_flavor):
        """Sets the gateway_flavor of this OSSearchEngine.


        :param gateway_flavor: The gateway_flavor of this OSSearchEngine.  # noqa: E501
        :type: VMFlavorNestview
        """

        self._gateway_flavor = gateway_flavor

    @property
    def gateway_http_port(self):
        """Gets the gateway_http_port of this OSSearchEngine.  # noqa: E501


        :return: The gateway_http_port of this OSSearchEngine.  # noqa: E501
        :rtype: int
        """
        return self._gateway_http_port

    @gateway_http_port.setter
    def gateway_http_port(self, gateway_http_port):
        """Sets the gateway_http_port of this OSSearchEngine.


        :param gateway_http_port: The gateway_http_port of this OSSearchEngine.  # noqa: E501
        :type: int
        """

        self._gateway_http_port = gateway_http_port

    @property
    def gateway_transport_port(self):
        """Gets the gateway_transport_port of this OSSearchEngine.  # noqa: E501


        :return: The gateway_transport_port of this OSSearchEngine.  # noqa: E501
        :rtype: int
        """
        return self._gateway_transport_port

    @gateway_transport_port.setter
    def gateway_transport_port(self, gateway_transport_port):
        """Sets the gateway_transport_port of this OSSearchEngine.


        :param gateway_transport_port: The gateway_transport_port of this OSSearchEngine.  # noqa: E501
        :type: int
        """

        self._gateway_transport_port = gateway_transport_port

    @property
    def id(self):
        """Gets the id of this OSSearchEngine.  # noqa: E501


        :return: The id of this OSSearchEngine.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSSearchEngine.


        :param id: The id of this OSSearchEngine.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def search_s3_load_balancer_group(self):
        """Gets the search_s3_load_balancer_group of this OSSearchEngine.  # noqa: E501


        :return: The search_s3_load_balancer_group of this OSSearchEngine.  # noqa: E501
        :rtype: S3LoadBalancerGroupNestview
        """
        return self._search_s3_load_balancer_group

    @search_s3_load_balancer_group.setter
    def search_s3_load_balancer_group(self, search_s3_load_balancer_group):
        """Sets the search_s3_load_balancer_group of this OSSearchEngine.


        :param search_s3_load_balancer_group: The search_s3_load_balancer_group of this OSSearchEngine.  # noqa: E501
        :type: S3LoadBalancerGroupNestview
        """

        self._search_s3_load_balancer_group = search_s3_load_balancer_group

    @property
    def size(self):
        """Gets the size of this OSSearchEngine.  # noqa: E501


        :return: The size of this OSSearchEngine.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this OSSearchEngine.


        :param size: The size of this OSSearchEngine.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this OSSearchEngine.  # noqa: E501


        :return: The status of this OSSearchEngine.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OSSearchEngine.


        :param status: The status of this OSSearchEngine.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sync_s3_load_balancer_group(self):
        """Gets the sync_s3_load_balancer_group of this OSSearchEngine.  # noqa: E501


        :return: The sync_s3_load_balancer_group of this OSSearchEngine.  # noqa: E501
        :rtype: S3LoadBalancerGroupNestview
        """
        return self._sync_s3_load_balancer_group

    @sync_s3_load_balancer_group.setter
    def sync_s3_load_balancer_group(self, sync_s3_load_balancer_group):
        """Sets the sync_s3_load_balancer_group of this OSSearchEngine.


        :param sync_s3_load_balancer_group: The sync_s3_load_balancer_group of this OSSearchEngine.  # noqa: E501
        :type: S3LoadBalancerGroupNestview
        """

        self._sync_s3_load_balancer_group = sync_s3_load_balancer_group

    @property
    def update(self):
        """Gets the update of this OSSearchEngine.  # noqa: E501


        :return: The update of this OSSearchEngine.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this OSSearchEngine.


        :param update: The update of this OSSearchEngine.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSSearchEngine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

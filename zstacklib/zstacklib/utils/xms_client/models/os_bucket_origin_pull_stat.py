# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.os_origin_pull_storage_class_stat import OSOriginPullStorageClassStat  # noqa: F401,E501


class OSBucketOriginPullStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'expired_objects': 'int',
        'expired_size': 'int',
        'failure_ops': 'int',
        'rx_objects': 'int',
        'rx_size': 'int',
        'storage_classes': 'dict(str, OSOriginPullStorageClassStat)',
        'success_ops': 'int',
        'total_ops': 'int',
        'total_rx_objects': 'int',
        'total_rx_size': 'int'
    }

    attribute_map = {
        'create': 'create',
        'expired_objects': 'expired_objects',
        'expired_size': 'expired_size',
        'failure_ops': 'failure_ops',
        'rx_objects': 'rx_objects',
        'rx_size': 'rx_size',
        'storage_classes': 'storage_classes',
        'success_ops': 'success_ops',
        'total_ops': 'total_ops',
        'total_rx_objects': 'total_rx_objects',
        'total_rx_size': 'total_rx_size'
    }

    def __init__(self, create=None, expired_objects=None, expired_size=None, failure_ops=None, rx_objects=None, rx_size=None, storage_classes=None, success_ops=None, total_ops=None, total_rx_objects=None, total_rx_size=None):  # noqa: E501
        """OSBucketOriginPullStat - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._expired_objects = None
        self._expired_size = None
        self._failure_ops = None
        self._rx_objects = None
        self._rx_size = None
        self._storage_classes = None
        self._success_ops = None
        self._total_ops = None
        self._total_rx_objects = None
        self._total_rx_size = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if expired_objects is not None:
            self.expired_objects = expired_objects
        if expired_size is not None:
            self.expired_size = expired_size
        if failure_ops is not None:
            self.failure_ops = failure_ops
        if rx_objects is not None:
            self.rx_objects = rx_objects
        if rx_size is not None:
            self.rx_size = rx_size
        if storage_classes is not None:
            self.storage_classes = storage_classes
        if success_ops is not None:
            self.success_ops = success_ops
        if total_ops is not None:
            self.total_ops = total_ops
        if total_rx_objects is not None:
            self.total_rx_objects = total_rx_objects
        if total_rx_size is not None:
            self.total_rx_size = total_rx_size

    @property
    def create(self):
        """Gets the create of this OSBucketOriginPullStat.  # noqa: E501


        :return: The create of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSBucketOriginPullStat.


        :param create: The create of this OSBucketOriginPullStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def expired_objects(self):
        """Gets the expired_objects of this OSBucketOriginPullStat.  # noqa: E501


        :return: The expired_objects of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._expired_objects

    @expired_objects.setter
    def expired_objects(self, expired_objects):
        """Sets the expired_objects of this OSBucketOriginPullStat.


        :param expired_objects: The expired_objects of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._expired_objects = expired_objects

    @property
    def expired_size(self):
        """Gets the expired_size of this OSBucketOriginPullStat.  # noqa: E501


        :return: The expired_size of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._expired_size

    @expired_size.setter
    def expired_size(self, expired_size):
        """Sets the expired_size of this OSBucketOriginPullStat.


        :param expired_size: The expired_size of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._expired_size = expired_size

    @property
    def failure_ops(self):
        """Gets the failure_ops of this OSBucketOriginPullStat.  # noqa: E501


        :return: The failure_ops of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._failure_ops

    @failure_ops.setter
    def failure_ops(self, failure_ops):
        """Sets the failure_ops of this OSBucketOriginPullStat.


        :param failure_ops: The failure_ops of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._failure_ops = failure_ops

    @property
    def rx_objects(self):
        """Gets the rx_objects of this OSBucketOriginPullStat.  # noqa: E501


        :return: The rx_objects of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._rx_objects

    @rx_objects.setter
    def rx_objects(self, rx_objects):
        """Sets the rx_objects of this OSBucketOriginPullStat.


        :param rx_objects: The rx_objects of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._rx_objects = rx_objects

    @property
    def rx_size(self):
        """Gets the rx_size of this OSBucketOriginPullStat.  # noqa: E501


        :return: The rx_size of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._rx_size

    @rx_size.setter
    def rx_size(self, rx_size):
        """Sets the rx_size of this OSBucketOriginPullStat.


        :param rx_size: The rx_size of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._rx_size = rx_size

    @property
    def storage_classes(self):
        """Gets the storage_classes of this OSBucketOriginPullStat.  # noqa: E501


        :return: The storage_classes of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: dict(str, OSOriginPullStorageClassStat)
        """
        return self._storage_classes

    @storage_classes.setter
    def storage_classes(self, storage_classes):
        """Sets the storage_classes of this OSBucketOriginPullStat.


        :param storage_classes: The storage_classes of this OSBucketOriginPullStat.  # noqa: E501
        :type: dict(str, OSOriginPullStorageClassStat)
        """

        self._storage_classes = storage_classes

    @property
    def success_ops(self):
        """Gets the success_ops of this OSBucketOriginPullStat.  # noqa: E501


        :return: The success_ops of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._success_ops

    @success_ops.setter
    def success_ops(self, success_ops):
        """Sets the success_ops of this OSBucketOriginPullStat.


        :param success_ops: The success_ops of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._success_ops = success_ops

    @property
    def total_ops(self):
        """Gets the total_ops of this OSBucketOriginPullStat.  # noqa: E501


        :return: The total_ops of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._total_ops

    @total_ops.setter
    def total_ops(self, total_ops):
        """Sets the total_ops of this OSBucketOriginPullStat.


        :param total_ops: The total_ops of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._total_ops = total_ops

    @property
    def total_rx_objects(self):
        """Gets the total_rx_objects of this OSBucketOriginPullStat.  # noqa: E501


        :return: The total_rx_objects of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._total_rx_objects

    @total_rx_objects.setter
    def total_rx_objects(self, total_rx_objects):
        """Sets the total_rx_objects of this OSBucketOriginPullStat.


        :param total_rx_objects: The total_rx_objects of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._total_rx_objects = total_rx_objects

    @property
    def total_rx_size(self):
        """Gets the total_rx_size of this OSBucketOriginPullStat.  # noqa: E501


        :return: The total_rx_size of this OSBucketOriginPullStat.  # noqa: E501
        :rtype: int
        """
        return self._total_rx_size

    @total_rx_size.setter
    def total_rx_size(self, total_rx_size):
        """Sets the total_rx_size of this OSBucketOriginPullStat.


        :param total_rx_size: The total_rx_size of this OSBucketOriginPullStat.  # noqa: E501
        :type: int
        """

        self._total_rx_size = total_rx_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSBucketOriginPullStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

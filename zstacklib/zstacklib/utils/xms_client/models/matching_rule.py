# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: SDS_4.2.300.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from zstacklib.utils.xms_client.models.matching_rule_match_condition import MatchingRuleMatchCondition  # noqa: F401,E501


class MatchingRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_id': 'str',
        'class_name': 'str',
        'matching_condition': 'MatchingRuleMatchCondition',
        'prior': 'int'
    }

    attribute_map = {
        'class_id': 'class_id',
        'class_name': 'class_name',
        'matching_condition': 'matching_condition',
        'prior': 'prior'
    }

    def __init__(self, class_id=None, class_name=None, matching_condition=None, prior=None):  # noqa: E501
        """MatchingRule - a model defined in Swagger"""  # noqa: E501

        self._class_id = None
        self._class_name = None
        self._matching_condition = None
        self._prior = None
        self.discriminator = None

        if class_id is not None:
            self.class_id = class_id
        if class_name is not None:
            self.class_name = class_name
        if matching_condition is not None:
            self.matching_condition = matching_condition
        if prior is not None:
            self.prior = prior

    @property
    def class_id(self):
        """Gets the class_id of this MatchingRule.  # noqa: E501


        :return: The class_id of this MatchingRule.  # noqa: E501
        :rtype: str
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this MatchingRule.


        :param class_id: The class_id of this MatchingRule.  # noqa: E501
        :type: str
        """

        self._class_id = class_id

    @property
    def class_name(self):
        """Gets the class_name of this MatchingRule.  # noqa: E501


        :return: The class_name of this MatchingRule.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this MatchingRule.


        :param class_name: The class_name of this MatchingRule.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def matching_condition(self):
        """Gets the matching_condition of this MatchingRule.  # noqa: E501


        :return: The matching_condition of this MatchingRule.  # noqa: E501
        :rtype: MatchingRuleMatchCondition
        """
        return self._matching_condition

    @matching_condition.setter
    def matching_condition(self, matching_condition):
        """Sets the matching_condition of this MatchingRule.


        :param matching_condition: The matching_condition of this MatchingRule.  # noqa: E501
        :type: MatchingRuleMatchCondition
        """

        self._matching_condition = matching_condition

    @property
    def prior(self):
        """Gets the prior of this MatchingRule.  # noqa: E501


        :return: The prior of this MatchingRule.  # noqa: E501
        :rtype: int
        """
        return self._prior

    @prior.setter
    def prior(self, prior):
        """Sets the prior of this MatchingRule.


        :param prior: The prior of this MatchingRule.  # noqa: E501
        :type: int
        """

        self._prior = prior

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchingRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
